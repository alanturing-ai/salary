from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot, check_user_access, get_editor_keyboard, get_viewer_keyboard
import sqlite3
from datetime import datetime, timedelta
import io
import csv

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
class TripStates(StatesGroup):
    waiting_for_driver = State()
    waiting_for_vehicle = State()
    waiting_for_loading_city = State()
    waiting_for_unloading_city = State()
    waiting_for_distance = State()
    waiting_for_side_loading = State()
    waiting_for_roof_loading = State()
    waiting_for_regular_downtime = State()
    waiting_for_forced_downtime = State()
    waiting_for_confirmation = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–µ–π—Å—É
class DowntimeStates(StatesGroup):
    waiting_for_trip_id = State()
    waiting_for_downtime_type = State()
    waiting_for_hours = State()
    waiting_for_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–π—Å–∞
def calculate_trip_payment(driver_data, distance, side_loading, roof_loading, reg_downtime=0, forced_downtime=0):
    # –†–∞—Å—á–µ—Ç –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    km_payment = distance * driver_data['km_rate']
    
    # –†–∞—Å—á–µ—Ç –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É
    side_loading_payment = side_loading * driver_data['side_loading_rate']
    roof_loading_payment = roof_loading * driver_data['roof_loading_rate']
    
    # –†–∞—Å—á–µ—Ç –∑–∞ –ø—Ä–æ—Å—Ç–æ–∏
    regular_downtime_payment = reg_downtime * driver_data['regular_downtime_rate']
    forced_downtime_payment = forced_downtime * driver_data['forced_downtime_rate']
    
    # –û–±—â–∞—è —Å—É–º–º–∞
    total = km_payment + side_loading_payment + roof_loading_payment + regular_downtime_payment + forced_downtime_payment
    
    return {
        'km_payment': km_payment,
        'side_loading_payment': side_loading_payment,
        'roof_loading_payment': roof_loading_payment,
        'regular_downtime_payment': regular_downtime_payment,
        'forced_downtime_payment': forced_downtime_payment,
        'total': total
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å")
async def add_trip(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤
    cursor.execute("SELECT COUNT(*) FROM drivers")
    drivers_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM vehicles")
    vehicles_count = cursor.fetchone()[0]
    
    if drivers_count == 0 or vehicles_count == 0:
        missing = []
        if drivers_count == 0:
            missing.append("–≤–æ–¥–∏—Ç–µ–ª–∏")
        if vehicles_count == 0:
            missing.append("–∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞")
        
        await message.answer(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}.")
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    cursor.execute("SELECT id, name FROM drivers ORDER BY name")
    drivers = cursor.fetchall()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for driver_id, name in drivers:
        keyboard.add(InlineKeyboardButton(f"{name}", callback_data=f"driver_{driver_id}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=keyboard)
    await TripStates.waiting_for_driver.set()
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data.startswith('driver_'), state=TripStates.waiting_for_driver)
async def process_driver_selection(callback_query: types.CallbackQuery, state: FSMContext):
    driver_id = int(callback_query.data.split('_')[1])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
    cursor.execute(
        """
        SELECT name, km_rate, side_loading_rate, roof_loading_rate, 
               regular_downtime_rate, forced_downtime_rate
        FROM drivers WHERE id = ?
        """, 
        (driver_id,)
    )
    driver_data = cursor.fetchone()
    
    await state.update_data(
        driver_id=driver_id,
        driver_name=driver_data[0],
        km_rate=driver_data[1],
        side_loading_rate=driver_data[2],
        roof_loading_rate=driver_data[3],
        regular_downtime_rate=driver_data[4],
        forced_downtime_rate=driver_data[5]
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞–º–∏
    cursor.execute("SELECT id, truck_number, trailer_number FROM vehicles ORDER BY truck_number")
    vehicles = cursor.fetchall()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for vehicle_id, truck, trailer in vehicles:
        keyboard.add(InlineKeyboardButton(f"{truck} / {trailer}", callback_data=f"vehicle_{vehicle_id}"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {driver_data[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥:",
        reply_markup=keyboard
    )
    
    await TripStates.waiting_for_vehicle.set()
    conn.close()

# –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–π—Å–∞
# ...

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Å–∞
@dp.message_handler(state=TripStates.waiting_for_confirmation)
async def confirm_trip(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "+"]:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_editor_keyboard())
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Å
    cursor.execute(
        """
        INSERT INTO trips 
        (driver_id, vehicle_id, loading_city, unloading_city, distance,
         side_loading_count, roof_loading_count, total_payment)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """,
        (
            data.get('driver_id'),
            data.get('vehicle_id'),
            data.get('loading_city'),
            data.get('unloading_city'),
            data.get('distance'),
            data.get('side_loading', 0),
            data.get('roof_loading', 0),
            data.get('total_payment')
        )
    )
    trip_id = cursor.lastrowid
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if data.get('regular_downtime', 0) > 0:
        reg_payment = data.get('regular_downtime', 0) * data.get('regular_downtime_rate', 0)
        cursor.execute(
            """
            INSERT INTO downtimes (trip_id, type, hours, payment)
            VALUES (?, 1, ?, ?)
            """,
            (trip_id, data.get('regular_downtime'), reg_payment)
        )
    
    if data.get('forced_downtime', 0) > 0:
        forced_payment = data.get('forced_downtime', 0) * data.get('forced_downtime_rate', 0)
        cursor.execute(
            """
            INSERT INTO downtimes (trip_id, type, hours, payment)
            VALUES (?, 2, ?, ?)
            """,
            (trip_id, data.get('forced_downtime'), forced_payment)
        )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (
            message.from_user.id, 
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞", 
            f"–†–µ–π—Å #{trip_id}: {data.get('loading_city')} - {data.get('unloading_city')}, {data.get('distance')} –∫–º"
        )
    )
    
    conn.commit()
    conn.close()
    
    await message.answer(
        f"–†–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {data.get('total_payment')} —Ä—É–±.",
        reply_markup=get_editor_keyboard()
    )
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–π—Å–æ–≤
@dp.message_handler(lambda message: message.text == "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤")
async def view_trips_history(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=2):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="history_7days"),
        InlineKeyboardButton("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="history_30days"),
        InlineKeyboardButton("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="history_all"),
        InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="history_export")
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith('history_'))
async def process_history_selection(callback_query: types.CallbackQuery):
    period = callback_query.data.split('_')[1]
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    query = """
    SELECT t.id, d.name, v.truck_number, v.trailer_number,
           t.loading_city, t.unloading_city, t.distance,
           t.total_payment, t.created_at
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    JOIN vehicles v ON t.vehicle_id = v.id
    """
    
    params = tuple()
    
    if period == "7days":
        query += " WHERE t.created_at >= datetime('now', '-7 days')"
    elif period == "30days":
        query += " WHERE t.created_at >= datetime('now', '-30 days')"
    elif period == "export":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        await export_history(callback_query)
        return
    
    query += " ORDER BY t.created_at DESC LIMIT 10"
    
    cursor.execute(query, params)
    trips = cursor.fetchall()
    
    if not trips:
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
        conn.close()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    text = f"üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤ {get_period_name(period)}:\n\n"
    
    for trip in trips:
        trip_id, driver, truck, trailer, load_city, unload_city, distance, payment, date = trip
        text += (
            f"üîπ –†–µ–π—Å #{trip_id} ({date.split(' ')[0]})\n"
            f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver}\n"
            f"üöõ –¢–°: {truck}/{trailer}\n"
            f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {load_city} ‚Üí {unload_city} ({distance} –∫–º)\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {payment} —Ä—É–±.\n\n"
        )
    
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text
    )
    
    conn.close()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
def get_period_name(period):
    if period == "7days":
        return "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
    elif period == "30days":
        return "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
    else:
        return "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV
async def export_history(callback_query):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–π—Å—ã
    cursor.execute("""
    SELECT t.id, d.name, v.truck_number, v.trailer_number,
           t.loading_city, t.unloading_city, t.distance,
           t.side_loading_count, t.roof_loading_count,
           t.total_payment, t.created_at
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    JOIN vehicles v ON t.vehicle_id = v.id
    ORDER BY t.created_at DESC
    """)
    
    trips = cursor.fetchall()
    
    if not trips:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
        )
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';', quotechar='"')
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow([
        "ID", "–í–æ–¥–∏—Ç–µ–ª—å", "–¢—è–≥–∞—á", "–ü—Ä–∏—Ü–µ–ø", "–ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏", 
        "–ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏", "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç", 
        "–ö—Ä—ã—à–∞", "–°—É–º–º–∞ (—Ä—É–±)", "–î–∞—Ç–∞"
    ])
    
    # –î–∞–Ω–Ω—ã–µ
    for trip in trips:
        writer.writerow(trip)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
    csv_bytes = output.getvalue().encode('utf-8-sig')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    filename = f"trips_history_{datetime.now().strftime('%Y-%m-%d')}.csv"
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_document(
        callback_query.message.chat.id,
        (filename, io.BytesIO(csv_bytes)),
        caption="–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤"
    )
    
    conn.close()
