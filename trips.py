from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot, check_user_access, get_editor_keyboard, get_viewer_keyboard, get_admin_keyboard
import sqlite3
from datetime import datetime, timedelta
import io
import csv
import logging


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_debug.log"),
        logging.StreamHandler()
    ]
)

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Å–∞–º–∏
def get_trips_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å"),
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å")
    )
    keyboard.add(
        types.KeyboardButton("‚è±Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π"),
        types.KeyboardButton("üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤")
    )
    keyboard.add(
        types.KeyboardButton("üîç –ù–∞–π—Ç–∏ —Ä–µ–π—Å"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    )
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Å—ã"
@dp.message_handler(lambda message: message.text == "üöö –†–µ–π—Å—ã")
async def show_trips_menu(message: types.Message):
    await message.answer("–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Å–∞–º–∏:", reply_markup=get_trips_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
    user_role = cursor.fetchone()
    conn.close()
    
    if user_role and user_role[0] == 0:  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_admin_keyboard())
    elif user_role and user_role[0] == 1:  # –†–µ–¥–∞–∫—Ç–æ—Ä
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_editor_keyboard())
    else:  # –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_viewer_keyboard())



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
class TripStates(StatesGroup):
    waiting_for_driver = State()
    waiting_for_vehicle = State()
    waiting_for_trip_1c_number = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞ –∏–∑ 1–°
    waiting_for_loading_city = State()
    waiting_for_unloading_city = State()
    waiting_for_distance = State()
    waiting_for_side_loading = State()
    waiting_for_roof_loading = State()
    waiting_for_regular_downtime = State()
    waiting_for_forced_downtime = State()
    waiting_for_confirmation = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Å–∞
class EditTripStates(StatesGroup):
    waiting_for_trip_id = State()
    waiting_for_field = State()
    waiting_for_new_value = State()
    waiting_for_confirmation = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–µ–π—Å—É
class DowntimeStates(StatesGroup):
    waiting_for_trip_id = State()
    waiting_for_downtime_type = State()
    waiting_for_hours = State()
    waiting_for_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–π—Å–∞
def calculate_trip_payment(driver_data, distance, side_loading, roof_loading, reg_downtime=0, forced_downtime=0):
    # –†–∞—Å—á–µ—Ç –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    km_payment = distance * driver_data['km_rate']
    
    # –†–∞—Å—á–µ—Ç –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É
    side_loading_payment = side_loading * driver_data['side_loading_rate']
    roof_loading_payment = roof_loading * driver_data['roof_loading_rate']
    
    # –†–∞—Å—á–µ—Ç –∑–∞ –ø—Ä–æ—Å—Ç–æ–∏
    regular_downtime_payment = reg_downtime * driver_data['regular_downtime_rate']
    forced_downtime_payment = forced_downtime * driver_data['forced_downtime_rate']
    
    # –û–±—â–∞—è —Å—É–º–º–∞
    total = km_payment + side_loading_payment + roof_loading_payment + regular_downtime_payment + forced_downtime_payment
    
    return {
        'km_payment': km_payment,
        'side_loading_payment': side_loading_payment,
        'roof_loading_payment': roof_loading_payment,
        'regular_downtime_payment': regular_downtime_payment,
        'forced_downtime_payment': forced_downtime_payment,
        'total': total
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞)
def get_navigation_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trip_back"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trip_cancel")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å")
async def add_trip(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤
    cursor.execute("SELECT COUNT(*) FROM drivers")
    drivers_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM vehicles")
    vehicles_count = cursor.fetchone()[0]
    
    if drivers_count == 0 or vehicles_count == 0:
        missing = []
        if drivers_count == 0:
            missing.append("–≤–æ–¥–∏—Ç–µ–ª–∏")
        if vehicles_count == 0:
            missing.append("–∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞")
        
        await message.answer(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}.")
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    cursor.execute("SELECT id, name FROM drivers ORDER BY name")
    drivers = cursor.fetchall()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for driver_id, name in drivers:
        keyboard.add(InlineKeyboardButton(f"{name}", callback_data=f"driver_{driver_id}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, —Ç.–∫. —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trip_cancel"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=keyboard)
    await TripStates.waiting_for_driver.set()
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data in ["trip_back", "trip_cancel"], state="*")
async def process_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (callback_query.from_user.id,))
    user_role = cursor.fetchone()
    
    if callback_query.data == "trip_cancel":
        # –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.finish()
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=None
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑–∞—Ç—å
        if user_role and user_role[0] == 0:  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            await bot.send_message(
                callback_query.message.chat.id,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_admin_keyboard()
            )
        elif user_role and user_role[0] == 1:  # –†–µ–¥–∞–∫—Ç–æ—Ä
            await bot.send_message(
                callback_query.message.chat.id,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_editor_keyboard()
            )
        else:  # –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
            await bot.send_message(
                callback_query.message.chat.id,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                reply_markup=get_viewer_keyboard()
            )
        
        conn.close()
        return
    
    elif callback_query.data == "trip_back":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        if current_state == "TripStates:waiting_for_vehicle":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–æ–¥–∏—Ç–µ–ª—è
            conn = sqlite3.connect('salary_bot.db')
            cursor = conn.cursor()
            
            cursor.execute("SELECT id, name FROM drivers ORDER BY name")
            drivers = cursor.fetchall()
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            for driver_id, name in drivers:
                keyboard.add(InlineKeyboardButton(f"{name}", callback_data=f"driver_{driver_id}"))
            
            keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trip_cancel"))
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:",
                reply_markup=keyboard
            )
            
            await TripStates.waiting_for_driver.set()
            conn.close()
            
        elif current_state == "TripStates:waiting_for_trip_1c_number":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞
            conn = sqlite3.connect('salary_bot.db')
            cursor = conn.cursor()
            
            data = await state.get_data()
            
            cursor.execute("SELECT id, truck_number, trailer_number FROM vehicles ORDER BY truck_number")
            vehicles = cursor.fetchall()
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            for vehicle_id, truck, trailer in vehicles:
                keyboard.add(InlineKeyboardButton(f"{truck} / {trailer}", callback_data=f"vehicle_{vehicle_id}"))
            
            keyboard.add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trip_back"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trip_cancel")
            )
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {data.get('driver_name', '')}\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥:",
                reply_markup=keyboard
            )
            
            await TripStates.waiting_for_vehicle.set()
            conn.close()
            
        elif current_state == "TripStates:waiting_for_loading_city":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞ –∏–∑ 1–°
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–ø–æ–µ–∑–¥: {data.get('truck_number', '')} / {data.get('trailer_number', '')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°:",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_trip_1c_number.set()
            
        elif current_state == "TripStates:waiting_for_unloading_city":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞ –ø–æ–≥—Ä—É–∑–∫–∏
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°: {data.get('trip_1c_number', '')}\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏:",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_loading_city.set()
            
        elif current_state == "TripStates:waiting_for_distance":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏: {data.get('loading_city', '')}\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏:",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_unloading_city.set()
            
        elif current_state == "TripStates:waiting_for_side_loading":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏: {data.get('unloading_city', '')}\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_distance.set()
            
        elif current_state == "TripStates:waiting_for_roof_loading":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data.get('distance', '')} –∫–º\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (—á–∏—Å–ª–æ –æ—Ç 0):",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_side_loading.set()
            
        elif current_state == "TripStates:waiting_for_regular_downtime":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–ë–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {data.get('side_loading', '')}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É (—á–∏—Å–ª–æ –æ—Ç 0):",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_roof_loading.set()
            
        elif current_state == "TripStates:waiting_for_forced_downtime":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–ó–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É: {data.get('roof_loading', '')}\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è (—á–∏—Å–ª–æ –æ—Ç 0):",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_regular_downtime.set()
            
        elif current_state == "TripStates:waiting_for_confirmation":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è
            data = await state.get_data()
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {data.get('regular_downtime', '')} —á\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è (—á–∏—Å–ª–æ –æ—Ç 0):",
                reply_markup=get_navigation_keyboard()
            )
            
            await TripStates.waiting_for_forced_downtime.set()
    
    conn.close()
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data.startswith('driver_'), state=TripStates.waiting_for_driver)
async def process_driver_selection(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è: {callback_query.data}")
    driver_id = int(callback_query.data.split('_')[1])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
    cursor.execute(
        """
        SELECT name, km_rate, side_loading_rate, roof_loading_rate, 
               regular_downtime_rate, forced_downtime_rate
        FROM drivers WHERE id = ?
        """, 
        (driver_id,)
    )
    driver_data = cursor.fetchone()
    
    await state.update_data(
        driver_id=driver_id,
        driver_name=driver_data[0],
        km_rate=driver_data[1],
        side_loading_rate=driver_data[2],
        roof_loading_rate=driver_data[3],
        regular_downtime_rate=driver_data[4],
        forced_downtime_rate=driver_data[5]
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    cursor.execute("SELECT id, truck_number, trailer_number FROM vehicles ORDER BY truck_number")
    vehicles = cursor.fetchall()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for vehicle_id, truck, trailer in vehicles:
        keyboard.add(InlineKeyboardButton(f"{truck} / {trailer}", callback_data=f"vehicle_{vehicle_id}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trip_back"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trip_cancel")
    )
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {driver_data[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥:",
        reply_markup=keyboard
    )
    
    await TripStates.waiting_for_vehicle.set()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('vehicle_'), state=TripStates.waiting_for_vehicle)
async def process_vehicle_selection(callback_query: types.CallbackQuery, state: FSMContext):
    vehicle_id = int(callback_query.data.split('_')[1])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–ø–æ–µ–∑–¥–µ
    cursor.execute("SELECT truck_number, trailer_number FROM vehicles WHERE id = ?", (vehicle_id,))
    truck_number, trailer_number = cursor.fetchone()
    conn.close()
    
    await state.update_data(
        vehicle_id=vehicle_id,
        truck_number=truck_number,
        trailer_number=trailer_number
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞ –∏–∑ 1–° –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–ø–æ–µ–∑–¥: {truck_number} / {trailer_number}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°:",
        reply_markup=get_navigation_keyboard()
    )
    
    await TripStates.waiting_for_trip_1c_number.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞ –∏–∑ 1–°
@dp.message_handler(state=TripStates.waiting_for_trip_1c_number)
async def process_trip_1c_number(message: types.Message, state: FSMContext):
    trip_1c_number = message.text.strip()
    
    await state.update_data(trip_1c_number=trip_1c_number)
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    sent_message = await message.answer(f"–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°: {trip_1c_number}\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏:", reply_markup=keyboard)
    
    await TripStates.waiting_for_loading_city.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–≥—Ä—É–∑–∫–∏
@dp.message_handler(state=TripStates.waiting_for_loading_city)
async def process_loading_city(message: types.Message, state: FSMContext):
    loading_city = message.text.strip()
    
    if not loading_city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–≥—Ä—É–∑–∫–∏.")
        return
    
    await state.update_data(loading_city=loading_city)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(f"–ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏: {loading_city}\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏:", reply_markup=keyboard)
    
    await TripStates.waiting_for_unloading_city.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
@dp.message_handler(state=TripStates.waiting_for_unloading_city)
async def process_unloading_city(message: types.Message, state: FSMContext):
    unloading_city = message.text.strip()
    
    if not unloading_city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏.")
        return
    
    await state.update_data(unloading_city=unloading_city)
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(f"–ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏: {unloading_city}\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=keyboard)
    
    await TripStates.waiting_for_distance.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state=TripStates.waiting_for_distance)
async def process_distance(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {message.text}")
    try:
        distance = float(message.text.replace(',', '.').strip())
        
        if distance <= 0:
            await message.answer("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞.")
            return
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(distance=distance)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –∫–º\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (—á–∏—Å–ª–æ –æ—Ç 0):", reply_markup=keyboard)
    
    await TripStates.waiting_for_side_loading.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
@dp.message_handler(state=TripStates.waiting_for_side_loading)
async def process_side_loading(message: types.Message, state: FSMContext):
    try:
        side_loading = int(message.text.strip())
        
        if side_loading < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–Ω–æ–≤–∞.")
            return
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(side_loading=side_loading)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(f"–ë–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {side_loading}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É (—á–∏—Å–ª–æ –æ—Ç 0):", reply_markup=keyboard)
    
    await TripStates.waiting_for_roof_loading.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É
@dp.message_handler(state=TripStates.waiting_for_roof_loading)
async def process_roof_loading(message: types.Message, state: FSMContext):
    try:
        roof_loading = int(message.text.strip())
        
        if roof_loading < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–Ω–æ–≤–∞.")
            return
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(roof_loading=roof_loading)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(f"–ó–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É: {roof_loading}\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è (—á–∏—Å–ª–æ –æ—Ç 0):", reply_markup=keyboard)
    
    await TripStates.waiting_for_regular_downtime.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è
@dp.message_handler(state=TripStates.waiting_for_regular_downtime)
async def process_regular_downtime(message: types.Message, state: FSMContext):
    try:
        regular_downtime = float(message.text.replace(',', '.').strip())
        
        if regular_downtime < 0:
            await message.answer("–ß–∞—Å—ã –ø—Ä–æ—Å—Ç–æ—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–Ω–æ–≤–∞.")
            return
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(regular_downtime=regular_downtime)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(f"–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {regular_downtime} —á\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è (—á–∏—Å–ª–æ –æ—Ç 0):", reply_markup=keyboard)
    
    await TripStates.waiting_for_forced_downtime.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è
@dp.message_handler(state=TripStates.waiting_for_forced_downtime)
async def process_forced_downtime(message: types.Message, state: FSMContext):
    try:
        forced_downtime = float(message.text.replace(',', '.').strip())
        
        if forced_downtime < 0:
            await message.answer("–ß–∞—Å—ã –ø—Ä–æ—Å—Ç–æ—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–Ω–æ–≤–∞.")
            return
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è —Å–Ω–æ–≤–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    forced_downtime = float(forced_downtime)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    driver_data = {
        'km_rate': data['km_rate'],
        'side_loading_rate': data['side_loading_rate'],
        'roof_loading_rate': data['roof_loading_rate'],
        'regular_downtime_rate': data['regular_downtime_rate'],
        'forced_downtime_rate': data['forced_downtime_rate']
    }
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
    payment_data = calculate_trip_payment(
        driver_data=driver_data,
        distance=data['distance'],
        side_loading=data['side_loading'],
        roof_loading=data['roof_loading'],
        reg_downtime=data['regular_downtime'],
        forced_downtime=forced_downtime
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–º –ø—Ä–æ—Å—Ç–æ–µ –∏ —Ä–∞—Å—á–µ—Ç–∞—Ö
    await state.update_data(
        forced_downtime=forced_downtime,
        km_payment=payment_data['km_payment'],
        side_loading_payment=payment_data['side_loading_payment'],
        roof_loading_payment=payment_data['roof_loading_payment'],
        regular_downtime_payment=payment_data['regular_downtime_payment'],
        forced_downtime_payment=payment_data['forced_downtime_payment'],
        total_payment=payment_data['total']
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    summary = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ:\n\n"
        f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {data['driver_name']}\n"
        f"üöõ –ê–≤—Ç–æ–ø–æ–µ–∑–¥: {data['truck_number']} / {data['trailer_number']}\n"
        f"üìù –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°: {data.get('trip_1c_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üèôÔ∏è –ú–∞—Ä—à—Ä—É—Ç: {data['loading_city']} ‚Üí {data['unloading_city']}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data['distance']} –∫–º (={payment_data['km_payment']} —Ä—É–±.)\n"
        f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∏: {data['side_loading']} –±–æ–∫. (={payment_data['side_loading_payment']} —Ä—É–±.), "
        f"{data['roof_loading']} –∫—Ä—ã—à–∞ (={payment_data['roof_loading_payment']} —Ä—É–±.)\n"
        f"‚è±Ô∏è –ü—Ä–æ—Å—Ç–æ–∏: {data['regular_downtime']} —á —Ä–µ–≥. (={payment_data['regular_downtime_payment']} —Ä—É–±.), "
        f"{forced_downtime} —á –≤—ã–Ω. (={payment_data['forced_downtime_payment']} —Ä—É–±.)\n\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {payment_data['total']} —Ä—É–±.\n\n"
        f"–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã? –í–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(summary, reply_markup=keyboard)
    await TripStates.waiting_for_confirmation.set()
    
# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Å–∞
@dp.message_handler(state=TripStates.waiting_for_confirmation)
async def confirm_trip(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "+"]:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_trips_menu())
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ trip_1c_number –≤ —Ç–∞–±–ª–∏—Ü–µ trips
        cursor.execute("PRAGMA table_info(trips)")
        columns = cursor.fetchall()
        columns_names = [column[1] for column in columns]
        
        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        if 'trip_1c_number' not in columns_names:
            cursor.execute("ALTER TABLE trips ADD COLUMN trip_1c_number TEXT")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Å —Å –Ω–æ–º–µ—Ä–æ–º –∏–∑ 1–°
        cursor.execute(
            """
            INSERT INTO trips 
            (driver_id, vehicle_id, loading_city, unloading_city, distance,
             side_loading_count, roof_loading_count, total_payment, trip_1c_number)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                data.get('driver_id'),
                data.get('vehicle_id'),
                data.get('loading_city'),
                data.get('unloading_city'),
                data.get('distance'),
                data.get('side_loading', 0),
                data.get('roof_loading', 0),
                data.get('total_payment'),
                data.get('trip_1c_number', '')
            )
        )
        trip_id = cursor.lastrowid
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if data.get('regular_downtime', 0) > 0:
            reg_payment = data.get('regular_downtime', 0) * data.get('regular_downtime_rate', 0)
            cursor.execute(
                """
                INSERT INTO downtimes (trip_id, type, hours, payment)
                VALUES (?, 1, ?, ?)
                """,
                (trip_id, data.get('regular_downtime'), reg_payment)
            )
        
        if data.get('forced_downtime', 0) > 0:
            forced_payment = data.get('forced_downtime', 0) * data.get('forced_downtime_rate', 0)
            cursor.execute(
                """
                INSERT INTO downtimes (trip_id, type, hours, payment)
                VALUES (?, 2, ?, ?)
                """,
                (trip_id, data.get('forced_downtime'), forced_payment)
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        cursor.execute(
            "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
            (
                message.from_user.id, 
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞", 
                f"–†–µ–π—Å #{trip_id}: {data.get('loading_city')} - {data.get('unloading_city')}, {data.get('distance')} –∫–º"
            )
        )
        
        conn.commit()
        
        await message.answer(
            f"‚úÖ –†–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"‚Ññ —Ä–µ–π—Å–∞: {trip_id}\n"
            f"–ù–æ–º–µ—Ä –∏–∑ 1–°: {data.get('trip_1c_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {data.get('total_payment')} —Ä—É–±.",
            reply_markup=get_trips_menu()  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –º–µ–Ω—é —Ä–µ–π—Å–æ–≤
        )
    
    except Exception as e:
        conn.rollback()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–π—Å–∞: {str(e)}",
            reply_markup=get_trips_menu()  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –º–µ–Ω—é —Ä–µ–π—Å–æ–≤
        )
    
    finally:
        conn.close()
        await state.finish()
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Å–∞
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å")
async def edit_trip(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–π—Å–æ–≤
    cursor.execute("SELECT COUNT(*) FROM trips")
    trips_count = cursor.fetchone()[0]
    
    if trips_count == 0:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ä–µ–π—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        conn.close()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–µ–π—Å–æ–≤", callback_data="cancel_edit"))
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–π—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    
    await EditTripStates.waiting_for_trip_id.set()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "cancel_edit", state=EditTripStates.waiting_for_trip_id)
async def cancel_edit(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=None
    )
    await bot.send_message(
        callback_query.message.chat.id,
        "–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Å–∞–º–∏:",
        reply_markup=get_trips_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —Ä–µ–π—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(state=EditTripStates.waiting_for_trip_id)
async def process_edit_trip_id(message: types.Message, state: FSMContext):
    try:
        trip_id = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–π—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("""
    SELECT t.id, d.name, v.truck_number, v.trailer_number, 
           t.trip_1c_number, t.loading_city, t.unloading_city, 
           t.distance, t.side_loading_count, t.roof_loading_count,
           t.total_payment
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    JOIN vehicles v ON t.vehicle_id = v.id
    WHERE t.id = ?
    """, (trip_id,))
    
    trip_data = cursor.fetchone()
    
    if not trip_data:
        await message.answer("–†–µ–π—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        conn.close()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–π—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        trip_id=trip_id
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–µ
    trip_info = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ #{trip_data[0]}:\n\n"
        f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {trip_data[1]}\n"
        f"üöõ –ê–≤—Ç–æ–ø–æ–µ–∑–¥: {trip_data[2]} / {trip_data[3]}\n"
        f"üìù –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°: {trip_data[4] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üèôÔ∏è –ü–æ–≥—Ä—É–∑–∫–∞: {trip_data[5]}\n"
        f"üèôÔ∏è –†–∞–∑–≥—Ä—É–∑–∫–∞: {trip_data[6]}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {trip_data[7]} –∫–º\n"
        f"üîÑ –ë–æ–∫–æ–≤—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏: {trip_data[8]}\n"
        f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É: {trip_data[9]}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {trip_data[10]} —Ä—É–±.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°", callback_data="edit_trip_1c_number"),
        InlineKeyboardButton("–ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏", callback_data="edit_loading_city"),
        InlineKeyboardButton("–ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏", callback_data="edit_unloading_city"),
        InlineKeyboardButton("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ", callback_data="edit_distance"),
        InlineKeyboardButton("–ë–æ–∫–æ–≤—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="edit_side_loading"),
        InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É", callback_data="edit_roof_loading"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trip_cancel")
    )
    
    await message.answer(trip_info, reply_markup=keyboard)
    await EditTripStates.waiting_for_field.set()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state=EditTripStates.waiting_for_field)
async def process_edit_field_selection(callback_query: types.CallbackQuery, state: FSMContext):
    field = callback_query.data.replace('edit_', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(field=field)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    field_names = {
        'trip_1c_number': '–Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°',
        'loading_city': '–≥–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏',
        'unloading_city': '–≥–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏',
        'distance': '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)',
        'side_loading': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫',
        'roof_loading': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É'
    }
    
    message_text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names.get(field, field)}':"
    
    if field in ['distance', 'side_loading', 'roof_loading']:
        message_text += "\n(–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)"
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=message_text,
        reply_markup=get_navigation_keyboard()
    )
    
    await EditTripStates.waiting_for_new_value.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è
@dp.message_handler(state=EditTripStates.waiting_for_new_value)
async def process_edit_new_value(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    field = data.get('field')
    new_value = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    if field == 'distance':
        try:
            new_value = float(new_value.replace(',', '.'))
            if new_value <= 0:
                await message.answer("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
            return
    
    elif field in ['side_loading', 'roof_loading']:
        try:
            new_value = int(new_value)
            if new_value < 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_value=new_value)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT t.id, d.name, t.loading_city, t.unloading_city, t.trip_1c_number
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    WHERE t.id = ?
    """, (data['trip_id'],))
    
    trip_info = cursor.fetchone()
    conn.close()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    field_names = {
        'trip_1c_number': '–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°',
        'loading_city': '–ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏',
        'unloading_city': '–ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏',
        'distance': '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)',
        'side_loading': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–∫–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫',
        'roof_loading': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞ #{trip_info[0]}\n\n"
        f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {trip_info[1]}\n"
        f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {trip_info[2]} ‚Üí {trip_info[3]}\n"
        f"üìù –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°: {trip_info[4] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ '{field_names.get(field, field)}' –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ '{new_value}'.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(confirmation_text, reply_markup=keyboard)
    
    await EditTripStates.waiting_for_confirmation.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(state=EditTripStates.waiting_for_confirmation)
async def confirm_edit_trip(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "+"]:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã.", reply_markup=get_trips_menu())
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–π—Å–∞
        if data['field'] in ['distance', 'side_loading', 'roof_loading']:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞
            cursor.execute("""
            SELECT driver_id, distance, side_loading_count, roof_loading_count
            FROM trips
            WHERE id = ?
            """, (data['trip_id'],))
            
            trip_data = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è
            cursor.execute("""
            SELECT km_rate, side_loading_rate, roof_loading_rate
            FROM drivers
            WHERE id = ?
            """, (trip_data[0],))
            
            rates = cursor.fetchone()
            
            # –¢–µ–∫—É—â–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
            current_km_payment = trip_data[1] * rates[0]
            current_side_loading_payment = trip_data[2] * rates[1]
            current_roof_loading_payment = trip_data[3] * rates[2]
            
            # –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            new_distance = data['new_value'] if data['field'] == 'distance' else trip_data[1]
            new_side_loading = data['new_value'] if data['field'] == 'side_loading' else trip_data[2]
            new_roof_loading = data['new_value'] if data['field'] == 'roof_loading' else trip_data[3]
            
            # –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
            new_km_payment = new_distance * rates[0]
            new_side_loading_payment = new_side_loading * rates[1]
            new_roof_loading_payment = new_roof_loading * rates[2]
            
            # –†–∞–∑–Ω–∏—Ü–∞ –≤ –æ–ø–ª–∞—Ç–µ
            payment_difference = (
                (new_km_payment - current_km_payment) +
                (new_side_loading_payment - current_side_loading_payment) +
                (new_roof_loading_payment - current_roof_loading_payment)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∏ –æ–±—â—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
            field_db_name = {
                'distance': 'distance',
                'side_loading': 'side_loading_count',
                'roof_loading': 'roof_loading_count'
            }.get(data['field'])
            
            cursor.execute(f"""
            UPDATE trips
            SET {field_db_name} = ?, total_payment = total_payment + ?
            WHERE id = ?
            """, (data['new_value'], payment_difference, data['trip_id']))
        
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            field_db_name = {
                'trip_1c_number': 'trip_1c_number',
                'loading_city': 'loading_city',
                'unloading_city': 'unloading_city'
            }.get(data['field'])
            
            cursor.execute(f"""
            UPDATE trips
            SET {field_db_name} = ?
            WHERE id = ?
            """, (data['new_value'], data['trip_id']))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        cursor.execute(
            "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
            (
                message.from_user.id, 
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞", 
                f"–†–µ–π—Å #{data['trip_id']}: –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ '{data['field']}' –Ω–∞ '{data['new_value']}'"
            )
        )
        
        conn.commit()
        
        await message.answer(
            f"‚úÖ –†–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!\n"
            f"–†–µ–π—Å #{data['trip_id']}\n"
            f"–ü–æ–ª–µ: {data['field']}\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {data['new_value']}",
            reply_markup=get_trips_menu()  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –º–µ–Ω—é —Ä–µ–π—Å–æ–≤
        )
    
    except Exception as e:
        conn.rollback()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–π—Å–∞: {str(e)}",
            reply_markup=get_trips_menu()  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –º–µ–Ω—é —Ä–µ–π—Å–æ–≤
        )
    
    finally:
        conn.close()
        await state.finish()
        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ trip_1c_number)
async def update_database_schema():
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ trip_1c_number –≤ —Ç–∞–±–ª–∏—Ü–µ trips
        cursor.execute("PRAGMA table_info(trips)")
        columns = cursor.fetchall()
        columns_names = [column[1] for column in columns]
        
        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        if 'trip_1c_number' not in columns_names:
            cursor.execute("ALTER TABLE trips ADD COLUMN trip_1c_number TEXT")
            conn.commit()
            logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ trip_1c_number –≤ —Ç–∞–±–ª–∏—Ü—É trips")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(commands=['start'])
async def on_start(message: types.Message):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await update_database_schema()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
    user_role = cursor.fetchone()
    
    if user_role:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_role[0] == 1:  # –†–µ–¥–∞–∫—Ç–æ—Ä
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=get_editor_keyboard())
        else:  # –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", reply_markup=get_viewer_keyboard())
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–π—Å–æ–≤
@dp.message_handler(lambda message: message.text == "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤")
async def view_trips_history(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=2):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="history_7days"),
        InlineKeyboardButton("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="history_30days"),
        InlineKeyboardButton("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="history_all"),
        InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="history_export"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="trip_cancel")
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith('history_'))
async def process_history_selection(callback_query: types.CallbackQuery):
    period = callback_query.data.split('_')[1]
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
    if period == "export":
        await export_history(callback_query)
        return
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    query = """
    SELECT t.id, d.name, v.truck_number, v.trailer_number,
           t.loading_city, t.unloading_city, t.distance,
           t.total_payment, t.created_at, t.trip_1c_number
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    JOIN vehicles v ON t.vehicle_id = v.id
    """
    
    params = tuple()
    
    if period == "7days":
        query += " WHERE t.created_at >= datetime('now', '-7 days')"
    elif period == "30days":
        query += " WHERE t.created_at >= datetime('now', '-30 days')"
    
    query += " ORDER BY t.created_at DESC LIMIT 10"
    
    cursor.execute(query, params)
    trips = cursor.fetchall()
    
    if not trips:
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
        conn.close()
        return

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–π—Å–æ–≤
@dp.callback_query_handler(lambda c: c.data == "trip_cancel" and c.message.text and "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞" in c.message.text)
async def history_back_to_menu(callback_query: types.CallbackQuery):
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–π—Å–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=None
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (callback_query.from_user.id,))
    user_role = cursor.fetchone()
    conn.close()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user_role and user_role[0] == 0:  # –ï—Å–ª–∏ —Ä–æ–ª—å = 0 (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
        await bot.send_message(
            callback_query.message.chat.id,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_admin_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        )
    elif user_role and user_role[0] == 1:  # –ï—Å–ª–∏ —Ä–æ–ª—å = 1 (–†–µ–¥–∞–∫—Ç–æ—Ä)
        await bot.send_message(
            callback_query.message.chat.id,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_editor_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        )
    else:  # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫)
        await bot.send_message(
            callback_query.message.chat.id,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_viewer_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    text = f"üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤ {get_period_name(period)}:\n\n"
    
    for trip in trips:
        trip_id, driver, truck, trailer, load_city, unload_city, distance, payment, date, trip_1c_number = trip
        text += (
            f"üîπ –†–µ–π—Å #{trip_id} ({date.split(' ')[0]})\n"
            f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver}\n"
            f"üöõ –¢–°: {truck}/{trailer}\n"
            f"üìù –ù–æ–º–µ—Ä –∏–∑ 1–°: {trip_1c_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {load_city} ‚Üí {unload_city} ({distance} –∫–º)\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {payment} —Ä—É–±.\n\n"
        )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
    if len(text) > 4096:
        text = text[:4000] + "...\n\n(–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ —Ä–µ–π—Å—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è)"
    
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text
    )
    
    conn.close()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
def get_period_name(period):
    if period == "7days":
        return "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
    elif period == "30days":
        return "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
    else:
        return "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV
async def export_history(callback_query):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–π—Å—ã
        cursor.execute("""
        SELECT t.id, d.name, v.truck_number, v.trailer_number,
               t.trip_1c_number, t.loading_city, t.unloading_city, t.distance,
               t.side_loading_count, t.roof_loading_count,
               t.total_payment, t.created_at
        FROM trips t
        JOIN drivers d ON t.driver_id = d.id
        JOIN vehicles v ON t.vehicle_id = v.id
        ORDER BY t.created_at DESC
        """)
        
        trips = cursor.fetchall()
        
        if not trips:
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                callback_query.message.chat.id,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            "ID", "–í–æ–¥–∏—Ç–µ–ª—å", "–¢—è–≥–∞—á", "–ü—Ä–∏—Ü–µ–ø", "–ù–æ–º–µ—Ä –∏–∑ 1–°", "–ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏", 
            "–ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏", "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç", 
            "–ö—Ä—ã—à–∞", "–°—É–º–º–∞ (—Ä—É–±)", "–î–∞—Ç–∞"
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for trip in trips:
            writer.writerow(trip)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        csv_bytes = output.getvalue().encode('utf-8-sig')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"trips_history_{datetime.now().strftime('%Y-%m-%d')}.csv"
        
        await bot.answer_callback_query(callback_query.id)
        await bot.send_document(
            callback_query.message.chat.id,
            (filename, io.BytesIO(csv_bytes)),
            caption="–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤"
        )
    
    except Exception as e:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_editor_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å"),
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å"),
        types.KeyboardButton("‚è±Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π"),
        types.KeyboardButton("üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤"),
        types.KeyboardButton("üîç –ù–∞–π—Ç–∏ —Ä–µ–π—Å"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π"),
        types.KeyboardButton("üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–µ–π—Å—É
@dp.message_handler(lambda message: message.text == "‚è±Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π")
async def add_downtime(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–π—Å–æ–≤
    cursor.execute("SELECT COUNT(*) FROM trips")
    trips_count = cursor.fetchone()[0]
    
    if trips_count == 0:
        await message.answer("–ù–µ—Ç —Ä–µ–π—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è.")
        conn.close()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–µ–π—Å–æ–≤", callback_data="cancel_downtime"))
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–π—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è:",
        reply_markup=keyboard
    )
    
    await DowntimeStates.waiting_for_trip_id.set()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è
@dp.callback_query_handler(lambda c: c.data == "cancel_downtime", state=DowntimeStates.waiting_for_trip_id)
async def cancel_downtime(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=None
    )
    await bot.send_message(
        callback_query.message.chat.id,
        "–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Å–∞–º–∏:",
        reply_markup=get_trips_menu()
    )
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —Ä–µ–π—Å–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—è
@dp.message_handler(state=DowntimeStates.waiting_for_trip_id)
async def process_trip_id_for_downtime(message: types.Message, state: FSMContext):
    try:
        trip_id = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–π—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞
    cursor.execute("""
    SELECT t.id, d.name, t.loading_city, t.unloading_city
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    WHERE t.id = ?
    """, (trip_id,))
    
    trip_data = cursor.fetchone()
    
    if not trip_data:
        await message.answer("–†–µ–π—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        conn.close()
        return
    
    await state.update_data(
        trip_id=trip_id,
        trip_info=f"–†–µ–π—Å #{trip_data[0]}: –í–æ–¥–∏—Ç–µ–ª—å {trip_data[1]}, {trip_data[2]} ‚Üí {trip_data[3]}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø–ª–∞—Ç—ã
    cursor.execute("""
    SELECT d.regular_downtime_rate, d.forced_downtime_rate
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    WHERE t.id = ?
    """, (trip_id,))
    
    downtime_rates = cursor.fetchone()
    
    await state.update_data(
        regular_downtime_rate=downtime_rates[0],
        forced_downtime_rate=downtime_rates[1]
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç–æ—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π", callback_data="downtime_regular"),
        InlineKeyboardButton("–í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π", callback_data="downtime_forced"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="trip_cancel")
    )
    
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω {trip_data[0]}\n"
        f"–í–æ–¥–∏—Ç–µ–ª—å: {trip_data[1]}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {trip_data[2]} ‚Üí {trip_data[3]}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Å—Ç–æ—è:",
        reply_markup=keyboard
    )
    
    await DowntimeStates.waiting_for_downtime_type.set()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç–æ—è
@dp.callback_query_handler(lambda c: c.data.startswith('downtime_'), state=DowntimeStates.waiting_for_downtime_type)
async def process_downtime_type(callback_query: types.CallbackQuery, state: FSMContext):
    downtime_type = callback_query.data.split('_')[1]
    
    if downtime_type == "regular":
        await state.update_data(downtime_type=1, downtime_name="–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π")
    else:
        await state.update_data(downtime_type=2, downtime_name="–í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π")
    
    data = await state.get_data()
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–í—ã–±—Ä–∞–Ω {data['trip_info']}\n–¢–∏–ø –ø—Ä–æ—Å—Ç–æ—è: {data['downtime_name']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ—è:",
        reply_markup=get_navigation_keyboard()
    )
    
    await DowntimeStates.waiting_for_hours.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ—è
@dp.message_handler(state=DowntimeStates.waiting_for_hours)
async def process_downtime_hours(message: types.Message, state: FSMContext):
    try:
        hours = float(message.text.replace(',', '.').strip())
        
        if hours <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Å–Ω–æ–≤–∞.")
            return
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Å–Ω–æ–≤–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –∑–∞ –ø—Ä–æ—Å—Ç–æ–π
    rate = data['regular_downtime_rate'] if data['downtime_type'] == 1 else data['forced_downtime_rate']
    payment = hours * rate
    
    await state.update_data(
        hours=hours,
        payment=payment
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    summary = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Å—Ç–æ–µ:\n\n"
        f"{data['trip_info']}\n"
        f"–¢–∏–ø –ø—Ä–æ—Å—Ç–æ—è: {data['downtime_name']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hours}\n"
        f"–°—Ç–∞–≤–∫–∞: {rate} —Ä—É–±/—á–∞—Å\n"
        f"–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {payment} —Ä—É–±\n\n"
        f"–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã? –í–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = get_navigation_keyboard()
    await message.answer(summary, reply_markup=keyboard)
    await DowntimeStates.waiting_for_confirmation.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è
@dp.message_handler(state=DowntimeStates.waiting_for_confirmation)
async def confirm_downtime(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "+"]:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_trips_menu())
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            """
            INSERT INTO downtimes (trip_id, type, hours, payment)
            VALUES (?, ?, ?, ?)
            """,
            (data['trip_id'], data['downtime_type'], data['hours'], data['payment'])
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–µ–π—Å–∞
        cursor.execute(
            """
            UPDATE trips
            SET total_payment = total_payment + ?
            WHERE id = ?
            """,
            (data['payment'], data['trip_id'])
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        cursor.execute(
            "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
            (
                message.from_user.id, 
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—è", 
                f"–†–µ–π—Å #{data['trip_id']}: {data['downtime_name']}, {data['hours']} —á, {data['payment']} —Ä—É–±."
            )
        )
        
        conn.commit()
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–†–µ–π—Å #{data['trip_id']}\n"
            f"–¢–∏–ø: {data['downtime_name']}\n"
            f"–ß–∞—Å—ã: {data['hours']}\n"
            f"–û–ø–ª–∞—Ç–∞: {data['payment']} —Ä—É–±.",
            reply_markup=get_trips_menu()
        )
    
    except Exception as e:
        conn.rollback()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ—è: {str(e)}",
            reply_markup=get_trips_menu()
        )
    
    finally:
        conn.close()
        await state.finish()
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞
@dp.message_handler(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ —Ä–µ–π—Å")
async def search_trip(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=2):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–π—Å–æ–≤
    cursor.execute("SELECT COUNT(*) FROM trips")
    trips_count = cursor.fetchone()[0]
    
    if trips_count == 0:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ä–µ–π—Å–æ–≤.")
        conn.close()
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–π—Å–∞ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–∞
@dp.message_handler(lambda message: message.text.startswith("/trip_"))
async def view_trip_by_id(message: types.Message):
    try:
        trip_id = int(message.text.split("_")[1])
    except (ValueError, IndexError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–µ–π—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç /trip_123")
        return
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ
    cursor.execute("""
    SELECT t.id, d.name, v.truck_number, v.trailer_number,
           t.loading_city, t.unloading_city, t.distance,
           t.side_loading_count, t.roof_loading_count,
           t.total_payment, t.created_at, t.trip_1c_number
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    JOIN vehicles v ON t.vehicle_id = v.id
    WHERE t.id = ?
    """, (trip_id,))
    
    trip = cursor.fetchone()
    
    if not trip:
        await message.answer(f"–†–µ–π—Å —Å ID {trip_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç–æ—è—Ö
    cursor.execute("""
    SELECT type, hours, payment
    FROM downtimes
    WHERE trip_id = ?
    ORDER BY type
    """, (trip_id,))
    
    downtimes = cursor.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    trip_id, driver, truck, trailer, load_city, unload_city, distance, side_loading, roof_loading, payment, date, trip_1c_number = trip
    
    text = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ #{trip_id}\n\n"
        f"üìÖ –î–∞—Ç–∞: {date.split(' ')[0]}\n"
        f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver}\n"
        f"üöõ –ê–≤—Ç–æ–ø–æ–µ–∑–¥: {truck} / {trailer}\n"
        f"üìù –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ 1–°: {trip_1c_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {load_city} ‚Üí {unload_city}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –∫–º\n"
        f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∏: {side_loading} –±–æ–∫–æ–≤—ã—Ö, {roof_loading} —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É\n"
    )
    
    if downtimes:
        text += "\n‚è±Ô∏è –ü—Ä–æ—Å—Ç–æ–∏:\n"
        for dtype, hours, dpayment in downtimes:
            downtime_type = "–†–µ–≥—É–ª—è—Ä–Ω—ã–π" if dtype == 1 else "–í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π"
            text += f"  ‚Ä¢ {downtime_type}: {hours} —á. ({dpayment} —Ä—É–±.)\n"
    
    text += f"\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞: {payment} —Ä—É–±."
    
    await message.answer(text)
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
@dp.message_handler(lambda message: message.text not in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å", "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤", "‚è±Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π", "üîç –ù–∞–π—Ç–∏ —Ä–µ–π—Å", "üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π"])
async def search_trips(message: types.Message):
    search_text = message.text.strip().lower()
    
    if not search_text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–º (ID —Ä–µ–π—Å–∞)
    try:
        trip_id = int(search_text)
        # –ï—Å–ª–∏ –¥–∞, –¥–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ ID
        await view_trip_by_id(types.Message(text=f"/trip_{trip_id}", from_user=message.from_user, chat=message.chat))
        return
    except ValueError:
        pass
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –≤–æ–¥–∏—Ç–µ–ª—è, –≥–æ—Ä–æ–¥–∞–º, –Ω–æ–º–µ—Ä–∞–º –¢–° –∏ –Ω–æ–º–µ—Ä—É –∏–∑ 1–°
    cursor.execute("""
    SELECT t.id, d.name, t.loading_city, t.unloading_city, t.created_at, t.trip_1c_number
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    JOIN vehicles v ON t.vehicle_id = v.id
    WHERE 
        LOWER(d.name) LIKE ? OR
        LOWER(t.loading_city) LIKE ? OR
        LOWER(t.unloading_city) LIKE ? OR
        LOWER(v.truck_number) LIKE ? OR
        LOWER(v.trailer_number) LIKE ? OR
        LOWER(t.trip_1c_number) LIKE ?
    ORDER BY t.created_at DESC
    LIMIT 10
    """, (f"%{search_text}%", f"%{search_text}%", f"%{search_text}%", f"%{search_text}%", f"%{search_text}%", f"%{search_text}%"))
    
    trips = cursor.fetchall()
    
    if not trips:
        await message.answer(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for trip_id, driver, loading, unloading, date, trip_1c_number in trips:
        date_short = date.split(" ")[0]
        trip_1c_info = f", 1–°:{trip_1c_number}" if trip_1c_number else ""
        btn_text = f"#{trip_id}: {driver}, {loading}-{unloading}{trip_1c_info} ({date_short})"
        keyboard.add(InlineKeyboardButton(btn_text, callback_data=f"view_trip_{trip_id}"))
    
    await message.answer(
        f"–ù–∞–π–¥–µ–Ω–æ {len(trips)} —Ä–µ–π—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}'.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Å–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('view_trip_'))
async def process_trip_selection(callback_query: types.CallbackQuery):
    trip_id = int(callback_query.data.split('_')[2])
    
    await bot.answer_callback_query(callback_query.id)
    await view_trip_by_id(types.Message(text=f"/trip_{trip_id}", from_user=callback_query.from_user, chat=callback_query.message.chat))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
async def driver_statistics(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    cursor.execute("""
    SELECT d.name, 
           COUNT(t.id) as trips_count,
           SUM(t.distance) as total_distance,
           SUM(t.total_payment) as total_payment
    FROM drivers d
    LEFT JOIN trips t ON d.id = t.driver_id AND t.created_at >= datetime('now', '-30 days')
    GROUP BY d.id
    ORDER BY total_payment DESC
    """)
    
    stats = cursor.fetchall()
    
    if not stats:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        conn.close()
        return
    
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
    
    for name, trips_count, total_distance, total_payment in stats:
        if trips_count is None or trips_count == 0:
            text += f"üë§ {name}: –Ω–µ—Ç —Ä–µ–π—Å–æ–≤\n\n"
        else:
            text += (
                f"üë§ {name}:\n"
                f"  ‚Ä¢ –†–µ–π—Å–æ–≤: {trips_count}\n"
                f"  ‚Ä¢ –ü—Ä–æ–±–µ–≥: {int(total_distance) if total_distance else 0} –∫–º\n"
                f"  ‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {int(total_payment) if total_payment else 0} —Ä—É–±.\n\n"
            )
    
    await message.answer(text)
    conn.close()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.TEXT, state="*")
async def universal_text_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –°–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏–π-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = {
        "TripStates:waiting_for_trip_1c_number": process_trip_1c_number,
        "TripStates:waiting_for_loading_city": process_loading_city,
        "TripStates:waiting_for_unloading_city": process_unloading_city,
        "TripStates:waiting_for_distance": process_distance,
        "TripStates:waiting_for_side_loading": process_side_loading,
        "TripStates:waiting_for_roof_loading": process_roof_loading,
        "TripStates:waiting_for_regular_downtime": process_regular_downtime,
        "TripStates:waiting_for_forced_downtime": process_forced_downtime,
        "TripStates:waiting_for_confirmation": confirm_trip
    }
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if current_state in handlers:
        handler = handlers[current_state]
        try:
            await handler(message, state)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
