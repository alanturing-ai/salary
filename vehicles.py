from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot import dp, bot, check_user_access
import sqlite3

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞
class VehicleStates(StatesGroup):
    waiting_for_truck_number = State()
    waiting_for_trailer_number = State()
    waiting_for_notes = State()
    waiting_for_confirmation = State()
    waiting_for_vehicle_id = State()
    waiting_for_delete_confirmation = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞–º–∏
def get_vehicles_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–µ–∑–¥"))
    keyboard.add(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤"))
    keyboard.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤
@dp.message_handler(lambda message: message.text == "üöö –ê–≤—Ç–æ–ø–æ–µ–∑–¥–∞")
async def manage_vehicles(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞–º–∏", reply_markup=get_vehicles_keyboard())
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–µ–∑–¥")
async def add_vehicle(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—è–≥–∞—á–∞:")
    await VehicleStates.waiting_for_truck_number.set()
    
    conn.close()

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–ø–æ–µ–∑–¥–µ
@dp.message_handler(state=VehicleStates.waiting_for_truck_number)
async def process_truck_number(message: types.Message, state: FSMContext):
    await state.update_data(truck_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞:")
    await VehicleStates.waiting_for_trailer_number.set()

@dp.message_handler(state=VehicleStates.waiting_for_trailer_number)
async def process_trailer_number(message: types.Message, state: FSMContext):
    await state.update_data(trailer_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç):")
    await VehicleStates.waiting_for_notes.set()

@dp.message_handler(state=VehicleStates.waiting_for_notes)
async def process_notes(message: types.Message, state: FSMContext):
    notes = message.text
    if notes == "-":
        notes = ""
    
    await state.update_data(notes=notes)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    confirmation_text = (
        f"üìå –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞:\n"
        f"üöõ –¢—è–≥–∞—á: {data['truck_number']}\n"
        f"üöú –ü—Ä–∏—Ü–µ–ø: {data['trailer_number']}\n"
    )
    
    if notes:
        confirmation_text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
    
    confirmation_text += "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)"
    
    await message.answer(confirmation_text)
    await VehicleStates.waiting_for_confirmation.set()

@dp.message_handler(state=VehicleStates.waiting_for_confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "+"]:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_vehicles_keyboard())
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    cursor.execute(
        """
        INSERT INTO vehicles 
        (truck_number, trailer_number, notes)
        VALUES (?, ?, ?)
        """,
        (
            data.get('truck_number'),
            data.get('trailer_number'),
            data.get('notes', '')
        )
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (message.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞", 
         f"–î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–ø–æ–µ–∑–¥: {data.get('truck_number')}/{data.get('trailer_number')}")
    )
    
    conn.commit()
    conn.close()
    
    await message.answer(
        f"–ê–≤—Ç–æ–ø–æ–µ–∑–¥ {data.get('truck_number')}/{data.get('trailer_number')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
        reply_markup=get_vehicles_keyboard()
    )
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤")
async def list_vehicles(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    cursor.execute("SELECT id, truck_number, trailer_number, notes FROM vehicles ORDER BY id")
    vehicles = cursor.fetchall()
    
    if not vehicles:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤ –ø—É—Å—Ç.", reply_markup=get_vehicles_keyboard())
        conn.close()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    text = "üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤:\n\n"
    
    for vehicle_id, truck, trailer, notes in vehicles:
        text += f"ID: {vehicle_id} | üöõ {truck} | üöú {trailer}"
        if notes:
            text += f" | üìù {notes}"
        text += "\n"
    
    await message.answer(text, reply_markup=get_vehicles_keyboard())
    conn.close()
