import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
import os
from database import init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7909538433:AAG8ot_W96YoUX_OXTy9QDOzV21Lg-1iqzI"  
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–æ–ª–µ–π
def get_editor_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å"))
    keyboard.add(types.KeyboardButton("üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤"))
    keyboard.add(types.KeyboardButton("üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
    return keyboard

def get_viewer_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"))
    return keyboard

def get_admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å"))
    keyboard.add(types.KeyboardButton("üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Å–æ–≤"))
    keyboard.add(types.KeyboardButton("üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
    keyboard.add(types.KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    return keyboard

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_access(cursor, user_id, required_role=2):
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        return False
    
    return result[0] <= required_role

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    conn = init_db()
    cursor = conn.cursor()
    
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —à—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("–û –Ω–µ—Ç, –∫–∞–∂–µ—Ç—Å—è –≤—ã –≤–æ—Ç–µ—Ä–º–µ–ª–æ–Ω, —Å–±—Ä–æ—Å—å—Ç–µ 50 –∫–≥, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!")
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user[0] == 0:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=get_admin_keyboard())
        elif user[0] == 1:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä.", reply_markup=get_editor_keyboard())
        else:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫.", reply_markup=get_viewer_keyboard())
    
    conn.close()

@dp.message_handler(commands=['myid'])
async def cmd_myid(message: types.Message):
    await message.answer(f"–í–∞—à ID: {message.from_user.id}")

@dp.message_handler(commands=['makeadmin'])
async def cmd_makeadmin(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET role = 0 WHERE user_id = ?", (user_id,))
    conn.commit()
    await message.answer("–í–∞—à–∞ —Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
    conn.close()
