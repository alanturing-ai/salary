from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot import dp, bot, check_user_access
import sqlite3
import aiogram.utils.exceptions

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
class DriverStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_km_rate = State()
    waiting_for_side_loading_rate = State()
    waiting_for_roof_loading_rate = State()
    waiting_for_regular_downtime_rate = State()
    waiting_for_forced_downtime_rate = State()
    waiting_for_notes = State()
    waiting_for_confirmation = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
def get_drivers_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"))
    keyboard.add(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π"))
    keyboard.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
@dp.message_handler(lambda message: message.text == "üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def manage_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üë§ –í–æ–¥–∏—Ç–µ–ª–∏"))
    keyboard.add(types.KeyboardButton("üöö –ê–≤—Ç–æ–ø–æ–µ–∑–¥–∞"))
    keyboard.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üë§ –í–æ–¥–∏—Ç–µ–ª–∏")
async def manage_drivers(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏", reply_markup=get_drivers_keyboard())
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@dp.message_handler(lambda message: message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è")
async def add_driver(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:")
    await DriverStates.waiting_for_name.set()
    
    conn.close()

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª–µ
@dp.message_handler(state=DriverStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä (–≤ —Ä—É–±–ª—è—Ö):")
    await DriverStates.waiting_for_km_rate.set()

@dp.message_handler(state=DriverStates.waiting_for_km_rate)
async def process_km_rate(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    try:
        km_rate = float(message.text.replace(',', '.'))
        await state.update_data(km_rate=km_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É –±–æ–∫–æ–≤–æ–≥–æ —Ç–µ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):")
        await DriverStates.waiting_for_side_loading_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥", state="*")
async def back_button_handler(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    
    from bot import get_editor_keyboard, get_viewer_keyboard
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_editor_keyboard())
    else:
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_viewer_keyboard())
    
    conn.close()
    
    # –í–∞–∂–Ω–æ! –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    return

@dp.message_handler(state=DriverStates.waiting_for_side_loading_rate)
async def process_side_loading_rate(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    try:
        side_loading_rate = float(message.text.replace(',', '.'))
        await state.update_data(side_loading_rate=side_loading_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É –∫—Ä—ã—à–∏ (–≤ —Ä—É–±–ª—è—Ö):")
        await DriverStates.waiting_for_roof_loading_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_roof_loading_rate)
async def process_roof_loading_rate(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    try:
        roof_loading_rate = float(message.text.replace(',', '.'))
        await state.update_data(roof_loading_rate=roof_loading_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π (–≤ —Ä—É–±–ª—è—Ö/–¥–µ–Ω—å):")
        await DriverStates.waiting_for_regular_downtime_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_regular_downtime_rate)
async def process_regular_downtime_rate(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    try:
        regular_downtime_rate = float(message.text.replace(',', '.'))
        await state.update_data(regular_downtime_rate=regular_downtime_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π (–≤ —Ä—É–±–ª—è—Ö/–¥–µ–Ω—å):")
        await DriverStates.waiting_for_forced_downtime_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_forced_downtime_rate)
async def process_forced_downtime_rate(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    try:
        forced_downtime_rate = float(message.text.replace(',', '.'))
        await state.update_data(forced_downtime_rate=forced_downtime_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç):")
        await DriverStates.waiting_for_notes.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_notes)
async def process_notes(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    notes = message.text
    if notes == "-":
        notes = ""
    
    await state.update_data(notes=notes)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    confirmation_text = (
        f"üìå –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞ –∑–∞ –∫–º: {data['km_rate']} —Ä—É–±\n"
        f"üöö –ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç: {data['side_loading_rate']} —Ä—É–±\n"
        f"üöö –ö—Ä—ã—à–∞: {data['roof_loading_rate']} —Ä—É–±\n"
        f"‚è±Ô∏è –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {data['regular_downtime_rate']} —Ä—É–±/–¥–µ–Ω—å\n"
        f"‚è±Ô∏è –í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {data['forced_downtime_rate']} —Ä—É–±/–¥–µ–Ω—å\n"
    )
    
    if notes:
        confirmation_text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
    
    confirmation_text += "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)"
    
    await message.answer(confirmation_text)
    await DriverStates.waiting_for_confirmation.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
async def list_drivers(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    cursor.execute("SELECT id, name, km_rate FROM drivers ORDER BY name")
    drivers = cursor.fetchall()
    
    if not drivers:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è'.", 
                           reply_markup=get_drivers_keyboard())
        conn.close()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    text = "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    
    for driver_id, name, km_rate in drivers:
        text += f"ID: {driver_id} | üë§ {name} | üí∞ {km_rate} —Ä—É–±/–∫–º\n"
    
    text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏:"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for driver_id, name, _ in drivers:
        keyboard.add(types.InlineKeyboardButton(
            f"üë§ {name}", callback_data=f"driver_info_{driver_id}"
        ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(text, reply_markup=keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    await message.answer("‚å®Ô∏è –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª–µ–π", reply_markup=get_drivers_keyboard())
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
@dp.callback_query_handler(lambda c: c.data.startswith('driver_info_'))
async def show_driver_info(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    driver_id = int(callback_query.data.split('_')[2])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
    cursor.execute("PRAGMA table_info(drivers)")
    columns = [column[1] for column in cursor.fetchall()]
    
    has_vehicle_id = 'vehicle_id' in columns
    
    if has_vehicle_id:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
        cursor.execute("""
            SELECT d.name, d.km_rate, d.side_loading_rate, d.roof_loading_rate,
                d.regular_downtime_rate, d.forced_downtime_rate, d.notes,
                v.truck_number, v.trailer_number
            FROM drivers d
            LEFT JOIN vehicles v ON d.vehicle_id = v.id
            WHERE d.id = ?
        """, (driver_id,))
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
        cursor.execute("""
            SELECT name, km_rate, side_loading_rate, roof_loading_rate,
                regular_downtime_rate, forced_downtime_rate, notes
            FROM drivers
            WHERE id = ?
        """, (driver_id,))
    
    driver_data = cursor.fetchone()
    
    if not driver_data:
        await bot.send_message(callback_query.from_user.id, "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ vehicle_id
    if has_vehicle_id:
        name, km_rate, side_rate, roof_rate, reg_rate, forced_rate, notes, truck, trailer = driver_data
    else:
        name, km_rate, side_rate, roof_rate, reg_rate, forced_rate, notes = driver_data
        truck, trailer = None, None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞ –∑–∞ –∫–º: {km_rate} —Ä—É–±\n"
        f"üöö –ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç: {side_rate} —Ä—É–±\n"
        f"üöö –ö—Ä—ã—à–∞: {roof_rate} —Ä—É–±\n"
        f"‚è±Ô∏è –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {reg_rate} —Ä—É–±/–¥–µ–Ω—å\n"
        f"‚è±Ô∏è –í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {forced_rate} —Ä—É–±/–¥–µ–Ω—å\n"
    )
    
    if has_vehicle_id and truck and trailer:
        text += f"üöõ –ê–≤—Ç–æ–ø–æ–µ–∑–¥: {truck}/{trailer}\n"
    else:
        text += "üöõ –ê–≤—Ç–æ–ø–æ–µ–∑–¥: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
    
    if notes:
        text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_driver_{driver_id}")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if has_vehicle_id:
        keyboard.add(types.InlineKeyboardButton("üöõ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–µ–∑–¥", callback_data=f"assign_vehicle_{driver_id}"))
    else:
        # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ë–î
        keyboard.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data=f"update_db_structure"))
    
    keyboard.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_driver_{driver_id}"))
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_drivers_list"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id, 
        text, 
        reply_markup=keyboard
    )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
@dp.callback_query_handler(lambda c: c.data == "back_to_drivers_list")
async def back_to_drivers_list(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é list_drivers
    message = types.Message.to_object({
        "message_id": 1,
        "date": 1,
        "chat": {"id": callback_query.from_user.id, "type": "private"},
        "from": {"id": callback_query.from_user.id},
        "text": "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π"
    })
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    await list_drivers(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
@dp.callback_query_handler(lambda c: c.data == "update_db_structure")
async def update_db_structure(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("ALTER TABLE drivers ADD COLUMN vehicle_id INTEGER")
        conn.commit()
        await bot.send_message(
            callback_query.from_user.id,
            "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º.",
            reply_markup=get_drivers_keyboard()
        )
    except sqlite3.OperationalError:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
            reply_markup=get_drivers_keyboard()
        )
    
    conn.close()

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@dp.message_handler(state=DriverStates.waiting_for_confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "+"]:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_drivers_keyboard())
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    cursor.execute(
        """
        INSERT INTO drivers 
        (name, km_rate, side_loading_rate, roof_loading_rate, 
        regular_downtime_rate, forced_downtime_rate, notes)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """,
        (
            data.get('name'),
            data.get('km_rate'),
            data.get('side_loading_rate'),
            data.get('roof_loading_rate'),
            data.get('regular_downtime_rate'),
            data.get('forced_downtime_rate'),
            data.get('notes', '')
        )
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (message.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è", f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {data.get('name')}")
    )
    
    conn.commit()
    conn.close()
    
    await message.answer(
        f"–í–æ–¥–∏—Ç–µ–ª—å {data.get('name')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
        reply_markup=get_drivers_keyboard()
    )
    await state.finish()

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
class DriverEditStates(StatesGroup):
    waiting_for_driver_id = State()
    waiting_for_field = State()
    waiting_for_new_value = State()
    waiting_for_confirmation = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_driver_'))
async def edit_driver(callback_query: types.CallbackQuery):
    driver_id = int(callback_query.data.split('_')[2])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üë§ –ò–º—è", callback_data=f"edit_field_{driver_id}_name"),
        types.InlineKeyboardButton("üí∞ –°—Ç–∞–≤–∫–∞ –∑–∞ –∫–º", callback_data=f"edit_field_{driver_id}_km_rate"),
        types.InlineKeyboardButton("üöö –ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç", callback_data=f"edit_field_{driver_id}_side_loading_rate"),
        types.InlineKeyboardButton("üöö –ö—Ä—ã—à–∞", callback_data=f"edit_field_{driver_id}_roof_loading_rate"),
        types.InlineKeyboardButton("‚è±Ô∏è –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π", callback_data=f"edit_field_{driver_id}_regular_downtime_rate"),
        types.InlineKeyboardButton("‚è±Ô∏è –í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π", callback_data=f"edit_field_{driver_id}_forced_downtime_rate"),
        types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=f"edit_field_{driver_id}_notes")
    )
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_field_'))
async def edit_field(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    driver_id = int(parts[2])
    field = parts[3]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ –∏ –ø–æ–ª–µ
    await state.update_data(driver_id=driver_id, field=field)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    field_names = {
        "name": "–∏–º—è",
        "km_rate": "—Å—Ç–∞–≤–∫—É –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä (–≤ —Ä—É–±–ª—è—Ö)",
        "side_loading_rate": "—Å—Ç–∞–≤–∫—É –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É –±–æ–∫–æ–≤–æ–≥–æ —Ç–µ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö)",
        "roof_loading_rate": "—Å—Ç–∞–≤–∫—É –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É –∫—Ä—ã—à–∏ (–≤ —Ä—É–±–ª—è—Ö)",
        "regular_downtime_rate": "—Å—Ç–∞–≤–∫—É –∑–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π (–≤ —Ä—É–±–ª—è—Ö/–¥–µ–Ω—å)",
        "forced_downtime_rate": "—Å—Ç–∞–≤–∫—É –∑–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π (–≤ —Ä—É–±–ª—è—Ö/–¥–µ–Ω—å)",
        "notes": "–ø—Ä–∏–º–µ—á–∞–Ω–∏—è"
    }
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names.get(field, field)}':"
    )
    
    await DriverEditStates.waiting_for_new_value.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=DriverEditStates.waiting_for_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_drivers_keyboard())
        return
    data = await state.get_data()
    driver_id = data.get('driver_id')
    field = data.get('field')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    try:
        if field in ['km_rate', 'side_loading_rate', 'roof_loading_rate', 
                    'regular_downtime_rate', 'forced_downtime_rate']:
            new_value = float(message.text.replace(',', '.'))
        else:
            new_value = message.text
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    cursor.execute(
        f"UPDATE drivers SET {field} = ? WHERE id = ?",
        (new_value, driver_id)
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (message.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è", 
         f"–í–æ–¥–∏—Ç–µ–ª—å ID#{driver_id}, –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ {field} –Ω–∞ {new_value}")
    )
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("SELECT name FROM drivers WHERE id = ?", (driver_id,))
    driver_name = cursor.fetchone()[0]
    
    conn.close()
    
    await message.answer(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è {driver_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=get_drivers_keyboard()
    )
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—é
@dp.callback_query_handler(lambda c: c.data.startswith('assign_vehicle_'))
async def assign_vehicle(callback_query: types.CallbackQuery):
    driver_id = int(callback_query.data.split('_')[2])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
    cursor.execute("PRAGMA table_info(drivers)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'vehicle_id' not in columns:
        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        try:
            cursor.execute("ALTER TABLE drivers ADD COLUMN vehicle_id INTEGER")
            conn.commit()
            await bot.send_message(
                callback_query.from_user.id,
                "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤!"
            )
        except sqlite3.OperationalError:
            # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            pass
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤
    cursor.execute("SELECT id, truck_number, trailer_number FROM vehicles ORDER BY truck_number")
    vehicles = cursor.fetchall()
    
    if not vehicles:
        await bot.answer_callback_query(callback_query.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤!")
        await bot.send_message(
            callback_query.from_user.id,
            "–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –ê–≤—Ç–æ–ø–æ–µ–∑–¥–∞.",
            reply_markup=get_drivers_keyboard()
        )
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for vehicle_id, truck, trailer in vehicles:
        keyboard.add(types.InlineKeyboardButton(
            f"{truck}/{trailer}", callback_data=f"set_vehicle_{driver_id}_{vehicle_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    keyboard.add(types.InlineKeyboardButton(
        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data=f"set_vehicle_{driver_id}_0"
    ))
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('set_vehicle_'))
async def set_vehicle(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    driver_id = int(parts[2])
    vehicle_id = int(parts[3])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
    cursor.execute("PRAGMA table_info(drivers)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'vehicle_id' not in columns:
        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        try:
            cursor.execute("ALTER TABLE drivers ADD COLUMN vehicle_id INTEGER")
            conn.commit()
        except sqlite3.OperationalError:
            # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            pass
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è
    cursor.execute("SELECT name FROM drivers WHERE id = ?", (driver_id,))
    driver_name = cursor.fetchone()[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞
    if vehicle_id == 0:
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        cursor.execute("UPDATE drivers SET vehicle_id = NULL WHERE id = ?", (driver_id,))
        vehicle_info = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        cursor.execute("UPDATE drivers SET vehicle_id = ? WHERE id = ?", (vehicle_id, driver_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–ø–æ–µ–∑–¥–µ
        cursor.execute("SELECT truck_number, trailer_number FROM vehicles WHERE id = ?", (vehicle_id,))
        truck, trailer = cursor.fetchone()
        vehicle_info = f"{truck}/{trailer}"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (callback_query.from_user.id, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞", 
         f"–í–æ–¥–∏—Ç–µ–ª—é {driver_name} (ID#{driver_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–ø–æ–µ–∑–¥ {vehicle_info}")
    )
    
    conn.commit()
    conn.close()
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"‚úÖ –ê–≤—Ç–æ–ø–æ–µ–∑–¥ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_name} {vehicle_info if vehicle_id != 0 else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}.",
        reply_markup=get_drivers_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data.startswith('delete_driver_'))
async def delete_driver(callback_query: types.CallbackQuery):
    driver_id = int(callback_query.data.split('_')[2])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è
    cursor.execute("SELECT name FROM drivers WHERE id = ?", (driver_id,))
    driver_result = cursor.fetchone()
    
    if not driver_result:
        await bot.answer_callback_query(callback_query.id, "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    driver_name = driver_result[0]
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{driver_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è {driver_name}?",
        reply_markup=keyboard
    )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_'))
async def confirm_delete_driver(callback_query: types.CallbackQuery):
    driver_id = int(callback_query.data.split('_')[2])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è
    cursor.execute("SELECT name FROM drivers WHERE id = ?", (driver_id,))
    driver_result = cursor.fetchone()
    
    if not driver_result:
        await bot.answer_callback_query(callback_query.id, "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    driver_name = driver_result[0]
    
    # –£–¥–∞–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    cursor.execute("DELETE FROM drivers WHERE id = ?", (driver_id,))
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (callback_query.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è", f"–£–¥–∞–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {driver_name}")
    )
    
    conn.commit()
    conn.close()
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=get_drivers_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_drivers_keyboard()
    )
