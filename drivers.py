from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot import dp, bot, check_user_access
import sqlite3

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
class DriverStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_km_rate = State()
    waiting_for_side_loading_rate = State()
    waiting_for_roof_loading_rate = State()
    waiting_for_regular_downtime_rate = State()
    waiting_for_forced_downtime_rate = State()
    waiting_for_notes = State()
    waiting_for_confirmation = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
def get_drivers_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"))
    keyboard.add(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π"))
    keyboard.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
@dp.message_handler(lambda message: message.text == "üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def manage_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üë§ –í–æ–¥–∏—Ç–µ–ª–∏"))
    keyboard.add(types.KeyboardButton("üöö –ê–≤—Ç–æ–ø–æ–µ–∑–¥–∞"))
    keyboard.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üë§ –í–æ–¥–∏—Ç–µ–ª–∏")
async def manage_drivers(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏", reply_markup=get_drivers_keyboard())
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@dp.message_handler(lambda message: message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è")
async def add_driver(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:")
    await DriverStates.waiting_for_name.set()
    
    conn.close()

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª–µ
@dp.message_handler(state=DriverStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä (–≤ —Ä—É–±–ª—è—Ö):")
    await DriverStates.waiting_for_km_rate.set()

@dp.message_handler(state=DriverStates.waiting_for_km_rate)
async def process_km_rate(message: types.Message, state: FSMContext):
    try:
        km_rate = float(message.text.replace(',', '.'))
        await state.update_data(km_rate=km_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É –±–æ–∫–æ–≤–æ–≥–æ —Ç–µ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):")
        await DriverStates.waiting_for_side_loading_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    from bot import get_editor_keyboard, get_viewer_keyboard
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_editor_keyboard())
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_viewer_keyboard())
    
    conn.close()

# –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–æ–¥–∏—Ç–µ–ª—è
@dp.message_handler(state=DriverStates.waiting_for_side_loading_rate)
async def process_side_loading_rate(message: types.Message, state: FSMContext):
    try:
        side_loading_rate = float(message.text.replace(',', '.'))
        await state.update_data(side_loading_rate=side_loading_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –ø–æ–≥—Ä—É–∑–∫—É/—Ä–∞–∑–≥—Ä—É–∑–∫—É –∫—Ä—ã—à–∏ (–≤ —Ä—É–±–ª—è—Ö):")
        await DriverStates.waiting_for_roof_loading_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_roof_loading_rate)
async def process_roof_loading_rate(message: types.Message, state: FSMContext):
    try:
        roof_loading_rate = float(message.text.replace(',', '.'))
        await state.update_data(roof_loading_rate=roof_loading_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π (–≤ —Ä—É–±–ª—è—Ö/—á–∞—Å):")
        await DriverStates.waiting_for_regular_downtime_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_regular_downtime_rate)
async def process_regular_downtime_rate(message: types.Message, state: FSMContext):
    try:
        regular_downtime_rate = float(message.text.replace(',', '.'))
        await state.update_data(regular_downtime_rate=regular_downtime_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∑–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π (–≤ —Ä—É–±–ª—è—Ö/—á–∞—Å):")
        await DriverStates.waiting_for_forced_downtime_rate.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_forced_downtime_rate)
async def process_forced_downtime_rate(message: types.Message, state: FSMContext):
    try:
        forced_downtime_rate = float(message.text.replace(',', '.'))
        await state.update_data(forced_downtime_rate=forced_downtime_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç):")
        await DriverStates.waiting_for_notes.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25.5")

@dp.message_handler(state=DriverStates.waiting_for_notes)
async def process_notes(message: types.Message, state: FSMContext):
    notes = message.text
    if notes == "-":
        notes = ""
    
    await state.update_data(notes=notes)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    confirmation_text = (
        f"üìå –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞ –∑–∞ –∫–º: {data['km_rate']} —Ä—É–±\n"
        f"üöö –ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç: {data['side_loading_rate']} —Ä—É–±\n"
        f"üöö –ö—Ä—ã—à–∞: {data['roof_loading_rate']} —Ä—É–±\n"
        f"‚è±Ô∏è –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {data['regular_downtime_rate']} —Ä—É–±/—á–∞—Å\n"
        f"‚è±Ô∏è –í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {data['forced_downtime_rate']} —Ä—É–±/—á–∞—Å\n"
    )
    
    if notes:
        confirmation_text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
    
    confirmation_text += "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)"
    
    await message.answer(confirmation_text)
    await DriverStates.waiting_for_confirmation.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
async def list_drivers(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    cursor.execute("SELECT id, name, km_rate FROM drivers ORDER BY name")
    drivers = cursor.fetchall()
    
    if not drivers:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è'.", 
                           reply_markup=get_drivers_keyboard())
        conn.close()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    text = "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    
    for driver_id, name, km_rate in drivers:
        text += f"ID: {driver_id} | üë§ {name} | üí∞ {km_rate} —Ä—É–±/–∫–º\n"
    
    await message.answer(text, reply_markup=get_drivers_keyboard())
    conn.close()

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@dp.message_handler(state=DriverStates.waiting_for_confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "+"]:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_drivers_keyboard())
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    cursor.execute(
        """
        INSERT INTO drivers 
        (name, km_rate, side_loading_rate, roof_loading_rate, 
        regular_downtime_rate, forced_downtime_rate, notes)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """,
        (
            data.get('name'),
            data.get('km_rate'),
            data.get('side_loading_rate'),
            data.get('roof_loading_rate'),
            data.get('regular_downtime_rate'),
            data.get('forced_downtime_rate'),
            data.get('notes', '')
        )
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (message.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è", f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {data.get('name')}")
    )
    
    conn.commit()
    conn.close()
    
    await message.answer(
        f"–í–æ–¥–∏—Ç–µ–ª—å {data.get('name')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
        reply_markup=get_drivers_keyboard()
    )
    await state.finish()
