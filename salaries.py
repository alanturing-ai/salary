from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot, check_user_access
import sqlite3
from datetime import datetime, timedelta
import io
import csv
import logging

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö
@dp.message_handler(lambda message: message.text == "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
async def show_current_data(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=2):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ", callback_data="salary_debt"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data="monthly_stats"),
        InlineKeyboardButton("üöö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞–º", callback_data="vehicle_stats")
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
@dp.callback_query_handler(lambda c: c.data == "salary_debt")
async def show_salary_debt(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é 
        # (—Å—É–º–º–∏—Ä—É–µ–º total_payment –∏–∑ trips)
        cursor.execute("""
        SELECT d.id, d.name, SUM(t.total_payment) as earned
        FROM drivers d
        LEFT JOIN trips t ON d.id = t.driver_id
        GROUP BY d.id
        ORDER BY d.name
        """)
        
        driver_earnings = cursor.fetchall()
        
        if not driver_earnings:
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id, 
                message_id=callback_query.message.message_id,
                text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö –∏–ª–∏ —Ä–µ–π—Å–∞—Ö."
            )
            conn.close()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º–∏
        text = "üíµ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ:\n\n"
        
        for driver_id, name, earned in driver_earnings:
            if earned is None:
                earned = 0
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –ë–î
            # –ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ - —ç—Ç–æ –¥–æ–ª–≥
            debt = earned
            
            if debt > 0:
                text += f"üë§ {name}: {int(debt)} —Ä—É–±.\n"
            else:
                text += f"üë§ {name}: –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_debt = sum(earned if earned else 0 for _, _, earned in driver_earnings)
        text += f"\nüí∞ –û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {int(total_debt)} —Ä—É–±."
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø. –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_debt"),
            InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="detailed_debt"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_current_data")
        )
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö –≤ CSV
@dp.callback_query_handler(lambda c: c.data == "export_debt")
async def export_debt(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        cursor.execute("""
        SELECT d.id, d.name, 
               SUM(t.total_payment) as earned,
               COUNT(t.id) as trips_count,
               SUM(t.distance) as total_distance
        FROM drivers d
        LEFT JOIN trips t ON d.id = t.driver_id
        GROUP BY d.id
        ORDER BY d.name
        """)
        
        driver_data = cursor.fetchall()
        
        if not driver_data:
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                callback_query.message.chat.id,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
            )
            conn.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            "ID", "–í–æ–¥–∏—Ç–µ–ª—å", "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (—Ä—É–±.)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤", 
            "–û–±—â–∏–π –ø—Ä–æ–±–µ–≥ (–∫–º)", "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å (—Ä—É–±.)"
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for driver_id, name, earned, trips_count, distance in driver_data:
            if earned is None:
                earned = 0
            if trips_count is None:
                trips_count = 0
            if distance is None:
                distance = 0
            
            # –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–∞–≤–Ω–∞ earned, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É)
            debt = earned
            
            writer.writerow([
                driver_id, name, earned, trips_count, distance, debt
            ])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        csv_bytes = output.getvalue().encode('utf-8-sig')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"salary_debt_{datetime.now().strftime('%Y-%m-%d')}.csv"
        
        await bot.answer_callback_query(callback_query.id)
        await bot.send_document(
            callback_query.message.chat.id,
            (filename, io.BytesIO(csv_bytes)),
            caption="–û—Ç—á–µ—Ç –ø–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º"
        )
    
    except Exception as e:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö
@dp.callback_query_handler(lambda c: c.data == "detailed_debt")
async def detailed_debt(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        cursor.execute("SELECT id, name FROM drivers ORDER BY name")
        drivers = cursor.fetchall()
        
        if not drivers:
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö."
            )
            conn.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(row_width=1)
        for driver_id, name in drivers:
            keyboard.add(InlineKeyboardButton(
                f"üë§ {name}", callback_data=f"driver_debt_{driver_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="salary_debt"))
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
    
    except Exception as e:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é
@dp.callback_query_handler(lambda c: c.data.startswith('driver_debt_'))
async def driver_debt_details(callback_query: types.CallbackQuery):
    driver_id = int(callback_query.data.split('_')[2])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
        cursor.execute("""
        SELECT name, km_rate, side_loading_rate, roof_loading_rate,
               regular_downtime_rate, forced_downtime_rate
        FROM drivers
        WHERE id = ?
        """, (driver_id,))
        
        driver_data = cursor.fetchone()
        
        if not driver_data:
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            conn.close()
            return
        
        name, km_rate, side_rate, roof_rate, reg_rate, forced_rate = driver_data
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        cursor.execute("""
        SELECT id, loading_city, unloading_city, distance, total_payment, created_at
        FROM trips
        WHERE driver_id = ? AND created_at >= datetime('now', '-30 days')
        ORDER BY created_at DESC
        """, (driver_id,))
        
        recent_trips = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞
        cursor.execute("""
        SELECT SUM(total_payment)
        FROM trips
        WHERE driver_id = ?
        """, (driver_id,))
        
        total_earned = cursor.fetchone()[0] or 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üìä –û—Ç—á–µ—Ç –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é: {name}\n\n"
        text += f"üí∞ –û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {int(total_earned)} —Ä—É–±.\n\n"
        
        text += "üìã –°—Ç–∞–≤–∫–∏:\n"
        text += f"‚Ä¢ –ö–∏–ª–æ–º–µ—Ç—Ä: {km_rate} —Ä—É–±.\n"
        text += f"‚Ä¢ –ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç: {side_rate} —Ä—É–±.\n"
        text += f"‚Ä¢ –ö—Ä—ã—à–∞: {roof_rate} —Ä—É–±.\n"
        text += f"‚Ä¢ –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {reg_rate} —Ä—É–±/–¥–µ–Ω—å\n"
        text += f"‚Ä¢ –í—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π: {forced_rate} —Ä—É–±/–¥–µ–Ω—å\n\n"
        
        if recent_trips:
            text += "üóÇÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–π—Å—ã (30 –¥–Ω–µ–π):\n"
            for trip_id, load, unload, distance, payment, date in recent_trips[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–π—Å–æ–≤
                date_str = date.split(" ")[0]
                text += f"‚Ä¢ #{trip_id} ({date_str}): {load}-{unload}, {int(payment)} —Ä—É–±.\n"
            
            if len(recent_trips) > 5:
                text += f"...–∏ –µ—â–µ {len(recent_trips) - 5} —Ä–µ–π—Å–æ–≤\n"
        else:
            text += "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Ä–µ–π—Å–æ–≤ –Ω–µ –±—ã–ª–æ\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="detailed_debt"))
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    
    except Exception as e:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(lambda c: c.data == "back_to_current_data")
async def back_to_current_data(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ", callback_data="salary_debt"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data="monthly_stats"),
        InlineKeyboardButton("üöö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞–º", callback_data="vehicle_stats")
    )
    
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data == "monthly_stats")
async def monthly_stats(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_current_data")
        )
    )

@dp.callback_query_handler(lambda c: c.data == "vehicle_stats")
async def vehicle_stats(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="üöö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–ø–æ–µ–∑–¥–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_current_data")
        )
    )
