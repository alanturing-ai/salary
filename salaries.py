# salaries.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot, check_user_access
import sqlite3
from datetime import datetime, timedelta
import io
import csv
import logging

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def check_db_structure():
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ paid –≤ —Ç–∞–±–ª–∏—Ü–µ trips
    cursor.execute("PRAGMA table_info(trips)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'paid' not in columns:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É paid —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 (–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ)
            cursor.execute("ALTER TABLE trips ADD COLUMN paid INTEGER DEFAULT 0")
            conn.commit()
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ 'paid' –≤ —Ç–∞–±–ª–∏—Ü—É 'trips'")
        except sqlite3.OperationalError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
    
    conn.close()

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
check_db_structure()

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤—ã–≤–æ–¥—è—â–∏–π —Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def debug_message(message: types.Message):
    if "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in message.text.lower():
        # –†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
        text_repr = [ord(c) for c in message.text]
        await message.answer(f"–û—Ç–ª–∞–¥–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}'\n–ö–æ–¥—ã: {text_repr}")
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é
        await show_current_data(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(lambda message: message.text == "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
async def show_current_data(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=2):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
    cursor.execute("SELECT COUNT(*) FROM trips WHERE paid = 0")
    unpaid_count = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
    cursor.execute("SELECT SUM(total_payment) FROM trips WHERE paid = 0")
    total_debt = cursor.fetchone()[0] or 0
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(f"üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ ({unpaid_count} —Ä–µ–π—Å–æ–≤, {int(total_debt)} ‚ÇΩ)", 
                            callback_data="view_debts"),
        InlineKeyboardButton("üë§ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", callback_data="view_debts_by_driver"),
        InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="detailed_report")
    )
    
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        f"–í—Å–µ–≥–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤: {unpaid_count}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {int(total_debt)} —Ä—É–±.",
        reply_markup=keyboard
    )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π
@dp.callback_query_handler(lambda c: c.data == "view_debts")
async def view_debts(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã
        cursor.execute("""
        SELECT t.id, d.name, t.loading_city, t.unloading_city, 
               t.distance, t.total_payment, t.created_at
        FROM trips t
        JOIN drivers d ON t.driver_id = d.id
        WHERE t.paid = 0
        ORDER BY t.created_at DESC
        """)
        
        unpaid_trips = cursor.fetchall()
        
        if not unpaid_trips:
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤."
            )
            conn.close()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º–∏
        text = "üí∞ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã:\n\n"
        
        total_debt = 0
        for trip_id, driver_name, load_city, unload_city, distance, payment, date in unpaid_trips:
            trip_date = date.split(' ')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
            text += (
                f"üîπ –†–µ–π—Å #{trip_id} ({trip_date})\n"
                f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n"
                f"üöö –ú–∞—Ä—à—Ä—É—Ç: {load_city} ‚Üí {unload_city}\n"
                f"üíµ –°—É–º–º–∞: {int(payment)} —Ä—É–±.\n\n"
            )
            total_debt += payment
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        text += f"–ò—Ç–æ–≥–æ: {int(total_debt)} —Ä—É–±."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–π—Å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π", callback_data="mark_paid"),
            InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_debts"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
@dp.callback_query_handler(lambda c: c.data == "view_debts_by_driver")
async def view_debts_by_driver(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        cursor.execute("""
        SELECT d.id, d.name, COUNT(t.id) as trips_count, 
               SUM(t.total_payment) as total_debt
        FROM drivers d
        LEFT JOIN trips t ON d.id = t.driver_id AND t.paid = 0
        GROUP BY d.id
        HAVING trips_count > 0
        ORDER BY total_debt DESC
        """)
        
        driver_debts = cursor.fetchall()
        
        if not driver_debts:
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="–ù–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º."
            )
            conn.close()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        text = "üë§ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:\n\n"
        
        for driver_id, name, trips_count, total_debt in driver_debts:
            text += (
                f"üë§ {name}\n"
                f"üöö –†–µ–π—Å–æ–≤: {trips_count}\n"
                f"üíµ –°—É–º–º–∞: {int(total_debt)} —Ä—É–±.\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(row_width=1)
        for driver_id, name, _, _ in driver_debts:
            keyboard.add(InlineKeyboardButton(
                f"{name} - –¥–µ—Ç–∞–ª–∏", callback_data=f"driver_trips_{driver_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data.startswith("driver_trips_"))
async def view_driver_trips(callback_query: types.CallbackQuery):
    driver_id = int(callback_query.data.split("_")[2])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è
        cursor.execute("SELECT name FROM drivers WHERE id = ?", (driver_id,))
        driver_name = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è
        cursor.execute("""
        SELECT id, loading_city, unloading_city, 
               distance, total_payment, created_at
        FROM trips
        WHERE driver_id = ? AND paid = 0
        ORDER BY created_at DESC
        """, (driver_id,))
        
        trips = cursor.fetchall()
        
        if not trips:
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"–£ –≤–æ–¥–∏—Ç–µ–ª—è {driver_name} –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_debts_by_driver")
                )
            )
            conn.close()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Å–∞–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è
        text = f"üë§ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è {driver_name}:\n\n"
        
        total_debt = 0
        for trip_id, load_city, unload_city, distance, payment, date in trips:
            trip_date = date.split(' ')[0]
            text += (
                f"üîπ –†–µ–π—Å #{trip_id} ({trip_date})\n"
                f"üöö –ú–∞—Ä—à—Ä—É—Ç: {load_city} ‚Üí {unload_city}\n"
                f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –∫–º\n"
                f"üíµ –°—É–º–º–∞: {int(payment)} —Ä—É–±.\n\n"
            )
            total_debt += payment
        
        text += f"–ò—Ç–æ–≥–æ: {int(total_debt)} —Ä—É–±."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–π—Å–∞–º–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
        keyboard = InlineKeyboardMarkup(row_width=1)
        for trip_id, _, _, _, payment, _ in trips:
            keyboard.add(InlineKeyboardButton(
                f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–π—Å #{trip_id} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π ({int(payment)} —Ä—É–±.)", 
                callback_data=f"pay_trip_{trip_id}"
            ))
        
        keyboard.add(InlineKeyboardButton(
            f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –í–°–ï —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ", 
            callback_data=f"pay_all_driver_{driver_id}"
        ))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_debts_by_driver"))
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Å–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ä–µ–π—Å–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ
@dp.callback_query_handler(lambda c: c.data.startswith("pay_trip_"))
async def mark_trip_paid(callback_query: types.CallbackQuery):
    trip_id = int(callback_query.data.split("_")[2])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ
        cursor.execute("""
        SELECT t.id, d.name, t.loading_city, t.unloading_city, t.total_payment
        FROM trips t
        JOIN drivers d ON t.driver_id = d.id
        WHERE t.id = ?
        """, (trip_id,))
        
        trip = cursor.fetchone()
        
        if not trip:
            await bot.answer_callback_query(callback_query.id, text="–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            conn.close()
            return
        
        trip_id, driver_name, load_city, unload_city, payment = trip
        
        # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–π—Å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
        cursor.execute("UPDATE trips SET paid = 1 WHERE id = ?", (trip_id,))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        cursor.execute(
            "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
            (
                callback_query.from_user.id,
                "–û—Ç–º–µ—Ç–∫–∞ —Ä–µ–π—Å–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ",
                f"–†–µ–π—Å #{trip_id}: {driver_name}, {load_city}-{unload_city}, {payment} —Ä—É–±."
            )
        )
        
        conn.commit()
        
        await bot.answer_callback_query(callback_query.id, text="‚úÖ –†–µ–π—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        await view_debts_by_driver(callback_query)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ä–µ–π—Å–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ä–µ–π—Å–∞: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
@dp.callback_query_handler(lambda c: c.data.startswith("pay_all_driver_"))
async def mark_all_driver_trips_paid(callback_query: types.CallbackQuery):
    driver_id = int(callback_query.data.split("_")[3])
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è
        cursor.execute("SELECT name FROM drivers WHERE id = ?", (driver_id,))
        driver_name = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±—â—É—é —Å—É–º–º—É –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
        cursor.execute("""
        SELECT COUNT(*), SUM(total_payment)
        FROM trips
        WHERE driver_id = ? AND paid = 0
        """, (driver_id,))
        
        count, total = cursor.fetchone()
        
        if not count or count == 0:
            await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤!")
            conn.close()
            return
        
        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
        cursor.execute("UPDATE trips SET paid = 1 WHERE driver_id = ? AND paid = 0", (driver_id,))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        cursor.execute(
            "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
            (
                callback_query.from_user.id,
                "–û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö",
                f"–í–æ–¥–∏—Ç–µ–ª—å: {driver_name}, –†–µ–π—Å–æ–≤: {count}, –°—É–º–º–∞: {total} —Ä—É–±."
            )
        )
        
        conn.commit()
        
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚úÖ –í—Å–µ —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è {driver_name} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ!\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤: {count}\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞: {int(total)} —Ä—É–±."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        await view_debts_by_driver(callback_query)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ä–µ–π—Å–æ–≤: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
@dp.callback_query_handler(lambda c: c.data == "mark_paid")
async def select_trip_to_mark_paid(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã
        cursor.execute("""
        SELECT t.id, d.name, t.loading_city, t.unloading_city, t.total_payment
        FROM trips t
        JOIN drivers d ON t.driver_id = d.id
        WHERE t.paid = 0
        ORDER BY t.created_at DESC
        """)
        
        trips = cursor.fetchall()
        
        if not trips:
            await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤!")
            await view_debts(callback_query)
            conn.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Å–∞
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        for trip_id, driver, load, unload, payment in trips:
            keyboard.add(InlineKeyboardButton(
                f"#{trip_id}: {driver}, {load}-{unload}, {int(payment)} —Ä—É–±.",
                callback_data=f"pay_trip_{trip_id}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_debts"))
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π:",
            reply_markup=keyboard
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ CSV
@dp.callback_query_handler(lambda c: c.data == "export_debts")
async def export_debts(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã
        cursor.execute("""
        SELECT t.id, d.name, v.truck_number, v.trailer_number,
               t.loading_city, t.unloading_city, t.distance,
               t.side_loading_count, t.roof_loading_count,
               t.total_payment, t.created_at
        FROM trips t
        JOIN drivers d ON t.driver_id = d.id
        JOIN vehicles v ON t.vehicle_id = v.id
        WHERE t.paid = 0
        ORDER BY d.name, t.created_at
        """)
        
        trips = cursor.fetchall()
        
        if not trips:
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                callback_query.message.chat.id,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
            )
            conn.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            "ID", "–í–æ–¥–∏—Ç–µ–ª—å", "–¢—è–≥–∞—á", "–ü—Ä–∏—Ü–µ–ø", "–ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏", 
            "–ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏", "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–ë–æ–∫–æ–≤–æ–π —Ç–µ–Ω—Ç", 
            "–ö—Ä—ã—à–∞", "–°—É–º–º–∞ (—Ä—É–±)", "–î–∞—Ç–∞"
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for trip in trips:
            writer.writerow(trip)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        csv_bytes = output.getvalue().encode('utf-8-sig')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"unpaid_trips_{datetime.now().strftime('%Y-%m-%d')}.csv"
        
        await bot.answer_callback_query(callback_query.id)
        await bot.send_document(
            callback_query.message.chat.id,
            (filename, io.BytesIO(csv_bytes)),
            caption="–û—Ç—á–µ—Ç –ø–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Ä–µ–π—Å–∞–º"
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}"
        )
    
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ show_current_data
    message = types.Message.to_object({
        "message_id": callback_query.message.message_id,
        "from": callback_query.from_user.to_python(),
        "chat": callback_query.message.chat.to_python(),
        "date": datetime.now().timestamp(),
        "text": "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    })
    
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await show_current_data(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data == "detailed_report")
async def show_detailed_report(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        cursor.execute("""
        SELECT d.name, 
               COUNT(CASE WHEN t.paid = 0 THEN 1 ELSE NULL END) as unpaid_trips,
               SUM(CASE WHEN t.paid = 0 THEN t.total_payment ELSE 0 END) as unpaid_amount,
               COUNT(CASE WHEN t.paid = 1 THEN 1 ELSE NULL END) as paid_trips,
               SUM(CASE WHEN t.paid = 1 THEN t.total_payment ELSE 0 END) as paid_amount,
               COUNT(t.id) as total_trips,
               SUM(t.total_payment) as total_amount
        FROM drivers d
        LEFT JOIN trips t ON d.id = t.driver_id
        GROUP BY d.id
        ORDER BY unpaid_amount DESC
        """)
        
        driver_stats = cursor.fetchall()
        
        if not driver_stats:
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞."
            )
            conn.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("""
        SELECT COUNT(CASE WHEN paid = 0 THEN 1 ELSE NULL END) as unpaid_trips,
               SUM(CASE WHEN paid = 0 THEN total_payment ELSE 0 END) as unpaid_amount,
               COUNT(CASE WHEN paid = 1 THEN 1 ELSE NULL END) as paid_trips,
               SUM(CASE WHEN paid = 1 THEN total_payment ELSE 0 END) as paid_amount,
               COUNT(id) as total_trips,
               SUM(total_payment) as total_amount
        FROM trips
        """)
        
        total_stats = cursor.fetchone()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º
        text = "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Å–∞–º:\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        unpaid_trips, unpaid_amount, paid_trips, paid_amount, total_trips, total_amount = total_stats
        
        if unpaid_amount is None:
            unpaid_amount = 0
        if paid_amount is None:
            paid_amount = 0
        if total_amount is None:
            total_amount = 0
        
        text += (
            "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤: {total_trips}\n"
            f"‚Ä¢ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {unpaid_trips} ({int(unpaid_amount)} —Ä—É–±.)\n"
            f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {paid_trips} ({int(paid_amount)} —Ä—É–±.)\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {int(total_amount)} —Ä—É–±.\n\n"
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        text += "üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:\n\n"
        
        for driver, unp_trips, unp_amount, p_trips, p_amount, t_trips, t_amount in driver_stats:
            if unp_amount is None:
                unp_amount = 0
            if p_amount is None:
                p_amount = 0
            if t_amount is None:
                t_amount = 0
            
            if unp_trips and unp_trips > 0:
                text += (
                    f"üîπ {driver}:\n"
                    f"‚Ä¢ –ù–µ–æ–ø–ª–∞—á–µ–Ω–æ: {unp_trips} —Ä–µ–π—Å–æ–≤ ({int(unp_amount)} —Ä—É–±.)\n"
                    f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {p_trips or 0} —Ä–µ–π—Å–æ–≤ ({int(p_amount)} —Ä—É–±.)\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ: {t_trips} —Ä–µ–π—Å–æ–≤ ({int(t_amount)} —Ä—É–±.)\n\n"
                )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 4096:
            text = text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ Telegram)"
        
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
        )
    
    finally:
        conn.close()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ ID —Ä–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
class PaymentStates(StatesGroup):
    waiting_for_trip_id = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID —Ä–µ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
@dp.message_handler(lambda message: message.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–π—Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º")
async def mark_trip_paid_cmd(message: types.Message):
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    if not await check_user_access(cursor, message.from_user.id, required_role=1):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        conn.close()
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π:")
    await PaymentStates.waiting_for_trip_id.set()
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —Ä–µ–π—Å–∞
@dp.message_handler(state=PaymentStates.waiting_for_trip_id)
async def process_trip_id(message: types.Message, state: FSMContext):
    try:
        trip_id = int(message.text.strip())
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    conn = sqlite3.connect('salary_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞
    cursor.execute("""
    SELECT t.id, d.name, t.loading_city, t.unloading_city, t.total_payment, t.paid
    FROM trips t
    JOIN drivers d ON t.driver_id = d.id
    WHERE t.id = ?
    """, (trip_id,))
    
    trip = cursor.fetchone()
    
    if not trip:
        await message.answer(f"–†–µ–π—Å —Å ID {trip_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()
        conn.close()
        return
    
    _, driver_name, load_city, unload_city, payment, paid = trip
    
    if paid == 1:
        await message.answer(f"–†–µ–π—Å #{trip_id} —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.")
        await state.finish()
        conn.close()
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–π—Å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
    cursor.execute("UPDATE trips SET paid = 1 WHERE id = ?", (trip_id,))
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO logs (user_id, action, details) VALUES (?, ?, ?)",
        (
            message.from_user.id,
            "–û—Ç–º–µ—Ç–∫–∞ —Ä–µ–π—Å–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ",
            f"–†–µ–π—Å #{trip_id}: {driver_name}, {load_city}-{unload_city}, {payment} —Ä—É–±."
        )
    )
    
    conn.commit()
    conn.close()
    
    await message.answer(
        f"‚úÖ –†–µ–π—Å #{trip_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π!\n\n"
        f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n"
        f"üöö –ú–∞—Ä—à—Ä—É—Ç: {load_city} ‚Üí {unload_city}\n"
        f"üíµ –°—É–º–º–∞: {int(payment)} —Ä—É–±."
    )
    
    await state.finish()
